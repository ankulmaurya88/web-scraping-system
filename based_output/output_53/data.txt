defaultdict(<class 'list'>, {'titles': ['Java Tutorial', 'Log in', 'Create Account', 'Basics', 'OOPs & Interfaces', 'Collections', 'Exception Handling', 'Java Advanced', 'Practice Java', 'Why Learn Java?', 'Java Hello World Program', 'Java Basics', 'Java Methods', 'Java Arrays', 'Java Strings', 'Java OOPs Concepts', 'Java Interfaces', 'Java Collections', 'Java Exception Handling', 'Java Multithreading', 'Java File Handling', 'Java Streams and Lambda Expressions', 'Java IO', 'Java Synchronization', 'Java Regex', 'Java Networking', 'Java Database Connectivity(JDBC)', 'Java Memory Allocation', 'Java Interview Questions', 'Best Approach to Learn Java', 'Java Program Examples', 'Java Coding Practice Problems', 'Java Quizzes and MCQs', 'Important Java Projects', 'Career & Jobs in Java 2025', 'List of Companies Using Java', 'Introduction to Java', 'Writing First Program in Java', 'Variables and Primitive DataTypes', 'Non Primitive DataTypes', 'Type Conversion in Java', 'Input in Java', 'Thank You!', 'What kind of Experience do you want to share?'], 'paragraphs': ['Javais a high-level,object-oriented programming languageused to build web apps, mobile applications, and enterprise software systems. It is known for itsWrite Once, Run Anywherecapability, which means code written in Java can run on any device that supports the Java Virtual Machine (JVM).', 'Java syntax and structure is similar to C-based languages likeC++and C#. Its robustness, platform-independent compatibility, and strong memory management have made it a go-to language for developers worldwide.', 'ThisJava tutorialis designed for bothbeginnersandexperienced professionalsand it covers basic to advanced Java topics.', 'Do you wish to learn Java in a scheduled manner ?Try our ongoing free courseJava Skillupwith weekly topic coverage, notes, daily quizzes and coding problems.', 'Do you wish to learn Advance Java in scheduled manner?Try our ongoing free courseAdvance Java Skillupwith weekly topic coverage, notes, daily quizzes and coding problems.', 'Here is a simple Java program that prints "Hello World".', 'Java basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals. Mastering these fundamentals is key to building strong, error-free Java applications:', 'Java methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier:', 'Java arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions:', 'Java Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed:', 'Java follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable:', 'Java interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach:', 'Java Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap:', 'ava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions:', 'Java Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks like parallel processing and responsive applications:', 'Java File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from thejava.ioandjava.niopackages for efficient file operations:', 'Java Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data:', 'Java IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of thejava.iopackage and supports both byte and character streams:', 'Java Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency:', 'Java Regex (Regular Expressions) allows pattern matching and text manipulation using thejava.util.regexpackage. It is powerful for validating, searching, and replacing strings based on specific patterns:', 'Java Networking enables communication between devices over a network using classes from thejava.netpackage. It supports protocols like TCP and UDP for building client-server applications and data exchange:', 'Java Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically:', 'Prepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate:', 'Here’s the step-by-step approach to learn and master Java efficiently and effectively:', '1.Understand Java Fundamentals:Start with the basics: what Java is, how it works (JVM, JRE, JDK), and why it’s platform-independent. Learn about Java’s role in building desktop, web, and mobile applications.', '2.Set Up the Java Environment:Install the latest JDK and configure your development environment. Use a beginner-friendly IDE like IntelliJ IDEA, Eclipse, or VS Code for writing and testing your code.', '3.Learn Core Java Concepts:Focus on essential topics like variables, data types, operators, control structures (if-else, switch, loops), and input/output. Practice writing simple programs to strengthen your understanding.', '4.Master Object-Oriented Programming (OOP):Dive into the pillars of OOP—classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Understand how Java handles these concepts and how to apply them effectively in real projects.', "5.Explore Collections and Data Structures:Learn about Java's Collection Framework—ArrayList, HashMap, Set, LinkedList, and more. Understand how to use them and when to choose one over the other.", '6.Work with Exception Handling:Understand the importance of error handling in Java using try-catch blocks, finally, throw, and custom exceptions. Learn best practices for writing clean, safe code.', '7.Get Comfortable with File I/O:Learn how Java reads from and writes to files usingFile,FileReader,BufferedReader,FileWriter, andStreams. Practice creating programs that manage and manipulate file data.', '8.Understand Multithreading and Concurrency:Grasp the basics of threads, synchronization, and concurrent programming. Learn how Java handles multiple tasks simultaneously using theThreadclass andExecutorService.', '9.Learn Java Libraries and APIs:Familiarize yourself with essential APIs like Java Math, Date & Time (java.time), and String manipulation. Explore popular libraries like Apache Commons, Gson, or Jackson for real-world development.', '10.Build Real-World Projects:Apply your knowledge by building console apps, file management systems, or basic desktop GUIs using JavaFX or Swing. Gradually move into web development with Java Servlets, JSP, or Spring Boot.', 'Java opens doors to a wide range of tech careers across industries—from enterprise software to mobile apps and cloud systems. Here’s a list of top career options for professionals with Java expertise, along with their average salary ranges:', 'These are some popular companies that use Java in thier workflow:', 'Already have an account ?Log in', '*Please enter your email address or userHandle.'], 'lists': [['CoursesDSA to DevelopmentGATE 2026 PrepGet 3 IBM CertificationsFor Working ProfessionalsInterview 101: DSA & System DesignData Science Training ProgramJAVA Backend Development (Live)Data Analytics TrainingDevOps Engineering (LIVE)Data Structures & Algorithms in PythonFor StudentsPlacement Preparation with DSAData Science (Live)Data Structure & Algorithm-Self Paced (C++/JAVA)Master Competitive ProgrammingFull Stack Development with React & Node JS (Live)(NEW) Digital Marketing ProgramFull Stack DevelopmentData Science & ML ProgramAll Courses', 'DSA to Development', 'GATE 2026 Prep', 'Get 3 IBM Certifications', 'For Working ProfessionalsInterview 101: DSA & System DesignData Science Training ProgramJAVA Backend Development (Live)Data Analytics TrainingDevOps Engineering (LIVE)Data Structures & Algorithms in Python', 'Interview 101: DSA & System Design', 'Data Science Training Program', 'JAVA Backend Development (Live)', 'Data Analytics Training', 'DevOps Engineering (LIVE)', 'Data Structures & Algorithms in Python', 'For StudentsPlacement Preparation with DSAData Science (Live)Data Structure & Algorithm-Self Paced (C++/JAVA)Master Competitive ProgrammingFull Stack Development with React & Node JS (Live)', 'Placement Preparation with DSA', 'Data Science (Live)', 'Data Structure & Algorithm-Self Paced (C++/JAVA)', 'Master Competitive Programming', 'Full Stack Development with React & Node JS (Live)', '(NEW) Digital Marketing Program', 'Full Stack Development', 'Data Science & ML Program', 'All Courses', 'TutorialsPythonJavaData Structures & AlgorithmsML & Data ScienceInterview CornerProgramming LanguagesWeb DevelopmentGATECS SubjectsDevOps And LinuxSchool LearningSoftware and Tools', 'Python', 'Java', 'Data Structures & Algorithms', 'ML & Data Science', 'Interview Corner', 'Programming Languages', 'Web Development', 'GATE', 'CS Subjects', 'DevOps And Linux', 'School Learning', 'Software and Tools', 'PracticePractice Coding ProblemsNation Skillup- Free CoursesProblem of the DayETS TOEFL: Scholarship Contest', 'Practice Coding Problems', 'Nation Skillup- Free Courses', 'Problem of the Day', 'ETS TOEFL: Scholarship Contest', 'JobsBecome a MentorApply Now!Post JobsJob-A-Thon: Hiring Challenge', 'Become a Mentor', 'Apply Now!', 'Post Jobs', 'Job-A-Thon: Hiring Challenge'], ['DSA to Development', 'GATE 2026 Prep', 'Get 3 IBM Certifications', 'For Working ProfessionalsInterview 101: DSA & System DesignData Science Training ProgramJAVA Backend Development (Live)Data Analytics TrainingDevOps Engineering (LIVE)Data Structures & Algorithms in Python', 'Interview 101: DSA & System Design', 'Data Science Training Program', 'JAVA Backend Development (Live)', 'Data Analytics Training', 'DevOps Engineering (LIVE)', 'Data Structures & Algorithms in Python', 'For StudentsPlacement Preparation with DSAData Science (Live)Data Structure & Algorithm-Self Paced (C++/JAVA)Master Competitive ProgrammingFull Stack Development with React & Node JS (Live)', 'Placement Preparation with DSA', 'Data Science (Live)', 'Data Structure & Algorithm-Self Paced (C++/JAVA)', 'Master Competitive Programming', 'Full Stack Development with React & Node JS (Live)', '(NEW) Digital Marketing Program', 'Full Stack Development', 'Data Science & ML Program', 'All Courses'], ['Interview 101: DSA & System Design', 'Data Science Training Program', 'JAVA Backend Development (Live)', 'Data Analytics Training', 'DevOps Engineering (LIVE)', 'Data Structures & Algorithms in Python'], ['Placement Preparation with DSA', 'Data Science (Live)', 'Data Structure & Algorithm-Self Paced (C++/JAVA)', 'Master Competitive Programming', 'Full Stack Development with React & Node JS (Live)'], ['Python', 'Java', 'Data Structures & Algorithms', 'ML & Data Science', 'Interview Corner', 'Programming Languages', 'Web Development', 'GATE', 'CS Subjects', 'DevOps And Linux', 'School Learning', 'Software and Tools'], ['Practice Coding Problems', 'Nation Skillup- Free Courses', 'Problem of the Day', 'ETS TOEFL: Scholarship Contest'], ['Become a Mentor', 'Apply Now!', 'Post Jobs', 'Job-A-Thon: Hiring Challenge'], ['Switch to Dark Mode', "NotificationsMark all as readAllView AllNotificationsMark all as readAllUnreadReadYou're all caught up!!", 'Sign In'], ['Java Course', 'Java Arrays', 'Java Strings', 'Java OOPs', 'Java Collection', 'Java 8 Tutorial', 'Java Multithreading', 'Java Exception Handling', 'Java Programs', 'Java Project', 'Java Collections Interview', 'Java Interview Questions', 'Java MCQs', 'Spring', 'Spring MVC', 'Spring Boot', 'Hibernate'], ['Explore GfG Courses', 'Share Your Experiences', 'Java Backend DevelopmentCourse'], ['Java is used to build Android apps, desktop and web apps, enterprise backend systems, and cloud-based software.', 'Java is in high demand with many job opportunities in software development.', 'Java has popular frameworks like Spring and Hibernate which makes Java powerful for enterprise applications.', 'Java supports object-oriented programming for clean and reusable code.', 'It runs on all platforms Windows, Mac, and Linux using the JVM.', 'Top companies like Amazon, Netflix, and LinkedIn use Java.'], ['Introduction', 'Download and Install Java', 'JDK vs JRE vs JVM', 'Identifiers', 'Keywords', 'Quiz:Java Basics and Identifiers', 'Data Types', 'Variables', 'Operators', 'Quiz:Variables,Operator', 'Decision Making (if, if-else, switch, break, continue, jump)', 'Loops', 'Quiz:Control Statements and Loops'], ['Introduction to Methods', 'Static Methods vs Instance Methods', 'Access Modifiers', 'Command Line Arguments', 'Variable Arguments (Varargs)', 'Quiz:Methods'], ['Introduction to Arrays', 'Declare and Initialize Arrays', 'Multi-Dimensional Arrays', 'Quiz:Java Arrays', 'Jagged Arrays', 'Arrays Class', 'Final Arrays', 'Java Array Programs', 'Quiz:Array Programs'], ['Introduction of Strings', 'Why Strings are Immutable?', 'Java\xa0String Concatenation', 'Quiz:String Basics', 'String Class', 'StringBuffer Class', 'StringBuilder Class', 'Quiz:String Classes', 'Strings vs StringBuffer vs StringBuilder', 'Java String Programs'], ['What are OOPs Concepts?', 'Classes and Objects', 'Quiz:Classes and Objects', 'Constructors', 'Quiz:Constructors', 'Object Class', 'Abstraction', 'Encapsulation', 'Inheritance', 'Quiz:Inheritance and Abstraction', 'Polymorphism', 'Compile-Time Polymorphism (Method Overloading)', 'Runtime Polymorphism (Method Overriding)', 'Packages', 'Quiz:Polymorphism and Packages'], ['Java Interfaces', 'Interfaces and Inheritance', 'Class vs Interface', 'Quiz:Interfaces', 'Functional Interface', 'Nested Interface', 'Marker Interface', 'Comparator Interface', 'Quiz:Interface types and Comparator'], ['Java Collection Framework', 'Collections Class', 'Collection Interface', 'Quiz:Collection', 'List Interface', 'ArrayList', 'LinkedList', 'Quiz:List,ArrayList,LinkedList', 'Set Interface', 'HashSet', 'TreeSet', 'Quiz:Set and HashSet', 'Queue Interface', 'Priority Queue', 'Deque Interface', 'Map Interface', 'HashMap', 'Quiz:Queue and Map Interface', 'Iterator', 'Comparator Interface', 'Comparable Interface', 'Quiz:Iterators,Comparator vs Comparable'], ['Java Exceptions', 'Checked vs Unchecked Exceptions', 'Try Catch Block', 'Quiz:Java Exceptions', 'Final, Finally and Finalize', 'Throw and Throws', 'Customized Exception Handling', 'Chained Exceptions', 'Null Pointer Exceptions', 'Exception Handling with Method Overriding', 'Quiz:Exception Handling'], ['Introduction to Java Multithreading', 'Threads', 'Thread Class', 'Runnable Interface', 'Quiz:Thread Basics and Lifecycle', 'Lifecycle and States of a Thread', 'Main Thread', 'Thread Priority in Multithreading', 'Naming & Feteching Name of Current Thread', 'Thread.start() vs Thread.run() Method', 'Thread.sleep() Method', 'Daemon Thread', 'Quiz:Thread Methods and Daemon Threads', 'Thread Safety', 'Thread Pools'], ['File Handling', 'File Class', 'Create Files', 'Read Files', 'Quiz:File Handling', 'Write on Files', 'Delete File', 'FileReader Class', 'FileWriter Class', 'Quiz:File Writing', 'FilePermission Class', 'FileDescriptor Class'], ['Lambda Expressions', 'Method References', 'Java Stream - Complete Tutorial', 'Quiz:Lambda Expressions and Streams', 'Java 8 Features - Complete Tutorial'], ['Introduction to Java IO', 'Reader Class', 'Writer Class', 'FileInput Stream', 'Quiz:IO Basics', 'FileOutput Stream', 'BufferedReader Input Stream', 'BufferedReader Output stream', 'BufferedReader vs Scanner', 'Fast I/O', 'Quiz:BufferedReader vs Scanner and Fast I/O'], ['Java Synchronization', 'Importance of Thread Synchronization', 'Method and Block Synchronization', 'Quiz:Synchronization Basics', 'Atomic vs Volatilevs Synchronized', 'Local Frameworks vs Thread Synchronization', 'Deadlock in Multithreading', 'Quiz:Deadlocks and Synchronization', 'Deadlock Prevention and Avoidance', 'Lock vs Monitor in Concurrency', 'Reentrant Lock', 'Quiz:Concurrency Locks and Reentrant Locks'], ['What is Java Regex?', 'Pattern Class', 'Matcher Class', 'Character Class', 'Quiz:Regex Basics and Pattern Matching', 'Quantifiers'], ['Introduction to Java Networking', 'TCP Architecture', 'UDP Architecture', 'IPV4 vs IPV6', 'Quiz:Networking Basics and Protocols', 'Connection-Oriented vs Connectionless Protocols', 'Socket Programming', 'Server Socket Class', 'Quiz:Sockets and Server Communication', 'URL Class and Methods'], ['Introduction to Java JDBC', 'JDBC Driver', 'JDBC Connection', 'Types of Statements in JDBC', 'Quiz:JDBC'], ['Java Memory Management', 'How Java Objects Stored in Memory?', 'Quiz:Java Memory Allocation', 'Stack vs Heap Memory Allocation', 'Quiz:Heap vs Stack', 'Java Virtual Machine(JVM) Stack Area', 'Types of Memory Areas Allocated by JVM', 'Garbage Collection', 'Quiz:JVM Memory Management and Garbage Collection', 'Types of JVM Garbage Collectors', 'Heap and Stack Memory Allocation', 'Memory Leaks'], ['200+ Core Java Interview Questions and Answers', 'Java MCQ'], ['Java Programming Examples', 'Java Exercises – Basic to Advanced Java Practice Programs'], ['Java Fundamentals Coding Practice Problems', 'Java Methods Coding Practice Problems', 'Java Arrays Coding Practice Problems', 'Java Strings Coding Practice Problems', 'Java OOPs Coding Practice Problems', 'Java Sorting and Searching Algorithms Coding Practice Problems', 'Java Collections Coding Practice Problems', 'Java Stream & Lambda Expression Coding Practice Problems'], ['Java Language MCQs with Answers'], ['Number Guessing Game', 'Simple Banking Application', 'Currency Converter', 'Tic-Tac-Toe Game', 'Snake Game', 'Memory Game', 'Chat Application', 'Face Detection System', 'Social Networking Site', 'Text Editor'], ['Java', 'Tutorials'], ['Java'], ['Company', 'About Us', 'Legal', 'Privacy Policy', 'Careers', 'In Media', 'Contact Us', 'Corporate Solution', 'Campus Training Program'], ['Explore', 'Job-A-Thon', 'Offline Classroom Program', 'DSA in JAVA/C++', 'Master System Design', 'Master CP', 'Videos'], ['Tutorials', 'Python', 'Java', 'C++', 'PHP', 'GoLang', 'SQL', 'R Language', 'Android'], ['DSA', 'DSA Tutorial', 'Problem Of The Day', 'GfG 160', 'DSA 360', 'DSA Roadmap', 'DSA Interview Questions', 'Competitive Programming'], ['Data Science & ML', 'Data Science With Python', 'Machine Learning', 'ML Maths', 'Data Visualisation', 'Pandas', 'NumPy', 'NLP', 'Deep Learning'], ['Web Technologies', 'HTML', 'CSS', 'JavaScript', 'TypeScript', 'ReactJS', 'NextJS', 'NodeJs', 'Bootstrap', 'Tailwind CSS'], ['Python Tutorial', 'Python Examples', 'Django Tutorial', 'Python Projects', 'Python Tkinter', 'Web Scraping', 'OpenCV Tutorial', 'Python Interview Question'], ['Computer Science', 'GATE CS Notes', 'Operating Systems', 'Computer Network', 'Database Management System', 'Software Engineering', 'Digital Logic Design', 'Engineering Maths'], ['DevOps', 'Git', 'AWS', 'Docker', 'Kubernetes', 'Azure', 'GCP', 'DevOps Roadmap'], ['System Design', 'High Level Design', 'Low Level Design', 'UML Diagrams', 'Interview Guide', 'Design Patterns', 'OOAD', 'System Design Bootcamp', 'Interview Questions'], ['School Subjects', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Social Science', 'English Grammar'], ['Databases', 'SQL', 'MYSQL', 'PostgreSQL', 'PL/SQL', 'MongoDB'], ['Preparation Corner', 'Company-Wise Recruitment Process', 'Aptitude Preparation', 'Puzzles', 'Company-Wise Preparation'], ['More Tutorials', 'Software Development', 'Software Testing', 'Product Management', 'Project Management', 'Linux', 'Excel', 'All Cheat Sheets'], ['Courses', 'IBM Certification Courses', 'DSA and Placements', 'Web Development', 'Data Science', 'Programming Languages', 'DevOps & Cloud'], ['Programming Languages', 'C Programming with Data Structures', 'C++ Programming Course', 'Java Programming Course', 'Python Full Course'], ['Clouds/Devops', 'DevOps Engineering', 'AWS Solutions Architect Certification', 'Salesforce Certified Administrator Course'], ['GATE 2026', 'GATE CS Rank Booster', 'GATE DA Rank Booster', 'GATE CS & IT Course - 2026', 'GATE DA Course 2026', 'GATE Rank Predictor']], 'links': [{'text': 'DSA to Development', 'href': 'https://www.geeksforgeeks.org/courses/dsa-to-development-coding-guide/'}, {'text': 'GATE 2026 Prep', 'href': 'https://www.geeksforgeeks.org/courses/category/gate/'}, {'text': 'Get 3 IBM Certifications', 'href': 'https://www.geeksforgeeks.org/courses/category/ibm-certification/'}, {'text': 'Interview 101: DSA & System Design', 'href': 'https://www.geeksforgeeks.org/courses/interviewe-101-data-structures-algorithm-system-design'}, {'text': 'Data Science Training Program', 'href': 'https://www.geeksforgeeks.org/courses/full-stack-applied-data-science-program/'}, {'text': 'JAVA Backend Development (Live)', 'href': 'https://www.geeksforgeeks.org/courses/Java-backend-live/'}, {'text': 'Data Analytics Training', 'href': 'https://www.geeksforgeeks.org/courses/data-analytics-training-program-excel-sql-python-powerbi'}, {'text': 'DevOps Engineering (LIVE)', 'href': 'https://www.geeksforgeeks.org/courses/devops-live/'}, {'text': 'Data Structures & Algorithms in Python', 'href': 'https://www.geeksforgeeks.org/courses/Data-Structures-With-Python/'}, {'text': 'Placement Preparation with DSA', 'href': 'https://www.geeksforgeeks.org/courses/placement-prep-programming-data-structures-algorithm'}, {'text': 'Data Science (Live)', 'href': 'https://www.geeksforgeeks.org/courses/data-science-live/'}, {'text': 'Data Structure & Algorithm-Self Paced (C++/JAVA)', 'href': 'https://www.geeksforgeeks.org/courses/dsa-self-paced/'}, {'text': 'Master Competitive Programming', 'href': 'https://www.geeksforgeeks.org/courses/competitive-programming-cp/'}, {'text': 'Full Stack Development with React & Node JS (Live)', 'href': 'https://www.geeksforgeeks.org/courses/full-stack-node/'}, {'text': '(NEW) Digital Marketing Program', 'href': 'https://www.geeksforgeeks.org/courses/digital-marketing-training'}, {'text': 'Full Stack Development', 'href': 'https://www.geeksforgeeks.org/courses/full-stack-node/'}, {'text': 'Data Science & ML Program', 'href': 'https://www.geeksforgeeks.org/courses/data-science-live/'}, {'text': 'All Courses', 'href': 'https://www.geeksforgeeks.org/courses'}, {'text': 'Python', 'href': 'https://www.geeksforgeeks.org/python/python-programming-language-tutorial/'}, {'text': 'Java', 'href': 'https://www.geeksforgeeks.org/java/java/'}, {'text': 'Data Structures & Algorithms', 'href': 'https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/'}, {'text': 'ML & Data Science', 'href': 'https://www.geeksforgeeks.org/ai-ml-and-data-science-tutorial-learn-ai-ml-and-data-science/'}, {'text': 'Interview Corner', 'href': 'https://www.geeksforgeeks.org/interview-corner/'}, {'text': 'Programming Languages', 'href': 'https://www.geeksforgeeks.org/programming-language-tutorials/'}, {'text': 'Web Development', 'href': 'https://www.geeksforgeeks.org/web-technology/'}, {'text': 'GATE', 'href': 'https://www.geeksforgeeks.org/gate-exam-tutorial/'}, {'text': 'CS Subjects', 'href': 'https://www.geeksforgeeks.org/articles-on-computer-science-subjects-gq/'}, {'text': 'DevOps And Linux', 'href': 'https://www.geeksforgeeks.org/devops-and-linux-tutorial/'}, {'text': 'School Learning', 'href': 'https://www.geeksforgeeks.org/geeksforgeeks-school/'}, {'text': 'Software and Tools', 'href': 'https://www.geeksforgeeks.org/websites-apps/software-and-tools-a-to-z-list/'}, {'text': 'Practice Coding Problems', 'href': 'https://www.geeksforgeeks.org/geeksforgeeks-practice-best-online-coding-platform/'}, {'text': 'Nation Skillup- Free Courses', 'href': 'https://www.geeksforgeeks.org/nation-skill-up/'}, {'text': 'Problem of the Day', 'href': 'https://www.geeksforgeeks.org/problem-of-the-day'}, {'text': 'ETS TOEFL: Scholarship Contest', 'href': 'https://www.geeksforgeeks.org/ets-toefl-global-scholar-challenge-2025'}, {'text': 'Become a Mentor', 'href': 'https://connect.geeksforgeeks.org/'}, {'text': 'Apply Now!', 'href': 'https://www.geeksforgeeks.org/jobs'}, {'text': 'Post Jobs', 'href': 'https://www.geeksforgeeks.org/gfg-hiring-solutions-for-recruiters/'}, {'text': 'Job-A-Thon: Hiring Challenge', 'href': 'https://practice.geeksforgeeks.org/events/rec/job-a-thon'}, {'text': 'Sign In', 'href': 'https://www.geeksforgeeks.org/java/java/'}, {'text': 'Java Course', 'href': 'https://www.geeksforgeeks.org/courses/java-online-course-complete-beginner-to-advanced'}, {'text': 'Java Arrays', 'href': 'https://www.geeksforgeeks.org/arrays-in-java/'}, {'text': 'Java Strings', 'href': 'https://www.geeksforgeeks.org/strings-in-java/'}, {'text': 'Java OOPs', 'href': 'https://www.geeksforgeeks.org/object-oriented-programming-oops-concept-in-java/'}, {'text': 'Java Collection', 'href': 'https://www.geeksforgeeks.org/java-collection-tutorial/'}, {'text': 'Java 8 Tutorial', 'href': 'https://www.geeksforgeeks.org/java-8/'}, {'text': 'Java Multithreading', 'href': 'https://www.geeksforgeeks.org/java-multithreading-tutorial/'}, {'text': 'Java Exception Handling', 'href': 'https://www.geeksforgeeks.org/exceptions-in-java/'}, {'text': 'Java Programs', 'href': 'https://www.geeksforgeeks.org/java-programming-examples/'}, {'text': 'Java Project', 'href': 'https://www.geeksforgeeks.org/top-50-java-project-ideas-for-beginners-advanced/'}, {'text': 'Java Collections Interview', 'href': 'https://www.geeksforgeeks.org/java-collections-interview-questions/'}, {'text': 'Java Interview Questions', 'href': 'https://www.geeksforgeeks.org/interview-questions-for-java-professionals/'}, {'text': 'Java MCQs', 'href': 'https://www.geeksforgeeks.org/quizzes/50-java-language-mcqs-with-answers-2/'}, {'text': 'Spring', 'href': 'https://www.geeksforgeeks.org/spring/'}, {'text': 'Spring MVC', 'href': 'https://www.geeksforgeeks.org/spring-mvc/'}, {'text': 'Spring Boot', 'href': 'https://www.geeksforgeeks.org/spring-boot/'}, {'text': 'Hibernate', 'href': 'https://www.geeksforgeeks.org/hibernate-tutorial/'}, {'text': 'Open In App', 'href': 'https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/java/?type%3Darticle%26id%3D1269336&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1'}, {'text': 'Explore GfG Courses', 'href': 'https://www.geeksforgeeks.org/courses'}, {'text': 'Share Your Experiences', 'href': 'https://write.geeksforgeeks.org/#experiences'}, {'text': 'Java Tutorial', 'href': 'https://www.geeksforgeeks.org/java/java/'}, {'text': 'Introduction to Java', 'href': 'https://www.geeksforgeeks.org/java/introduction-to-java/'}, {'text': 'Java Programming Basics', 'href': 'https://www.geeksforgeeks.org/java/java-programming-basics/'}, {'text': 'Java Methods', 'href': 'https://www.geeksforgeeks.org/java/methods-in-java/'}, {'text': 'Access Modifiers in Java', 'href': 'https://www.geeksforgeeks.org/java/access-modifiers-java/'}, {'text': 'Arrays in Java', 'href': 'https://www.geeksforgeeks.org/java/arrays-in-java/'}, {'text': 'Java Strings', 'href': 'https://www.geeksforgeeks.org/java/strings-in-java/'}, {'text': 'Regular Expressions in Java', 'href': 'https://www.geeksforgeeks.org/java/regular-expressions-in-java/'}, {'text': 'Classes and Objects in Java', 'href': 'https://www.geeksforgeeks.org/java/classes-objects-java/'}, {'text': 'Java Constructors', 'href': 'https://www.geeksforgeeks.org/java/constructors-in-java/'}, {'text': 'Java OOP(Object Oriented Programming) Concepts', 'href': 'https://www.geeksforgeeks.org/java/object-oriented-programming-oops-concept-in-java/'}, {'text': 'Java Packages', 'href': 'https://www.geeksforgeeks.org/java/packages-in-java/'}, {'text': 'Java Interface', 'href': 'https://www.geeksforgeeks.org/java/interfaces-in-java/'}, {'text': 'Collections in Java', 'href': 'https://www.geeksforgeeks.org/java/collections-in-java-2/'}, {'text': 'Collections Class in Java', 'href': 'https://www.geeksforgeeks.org/java/collections-class-in-java/'}, {'text': 'Collection Interface in Java', 'href': 'https://www.geeksforgeeks.org/java/collection-interface-in-java-with-examples/'}, {'text': 'Java Iterator', 'href': 'https://www.geeksforgeeks.org/java/iterators-in-java/'}, {'text': 'Java Comparator Interface', 'href': 'https://www.geeksforgeeks.org/java/java-comparator-interface/'}, {'text': 'Java Exception Handling', 'href': 'https://www.geeksforgeeks.org/java/exceptions-in-java/'}, {'text': 'Java Try Catch Block', 'href': 'https://www.geeksforgeeks.org/java/java-try-catch-block/'}, {'text': 'Java final, finally and finalize', 'href': 'https://www.geeksforgeeks.org/java/java-final-finally-and-finalize/'}, {'text': 'Chained Exceptions in Java', 'href': 'https://www.geeksforgeeks.org/java/chained-exceptions-in-java/'}, {'text': 'Null Pointer Exception in Java', 'href': 'https://www.geeksforgeeks.org/java/null-pointer-exception-in-java/'}, {'text': 'Exception Handling with Method Overriding in Java', 'href': 'https://www.geeksforgeeks.org/java/exception-handling-with-method-overriding-in-java/'}, {'text': 'Java Multithreading Tutorial', 'href': 'https://www.geeksforgeeks.org/java/java-multithreading-tutorial/'}, {'text': 'Synchronization in Java', 'href': 'https://www.geeksforgeeks.org/java/synchronization-in-java/'}, {'text': 'File Handling in Java', 'href': 'https://www.geeksforgeeks.org/java/file-handling-in-java/'}, {'text': 'Java Method References', 'href': 'https://www.geeksforgeeks.org/java/java-method-references/'}, {'text': 'Java 8 Stream Tutorial', 'href': 'https://www.geeksforgeeks.org/java/java-8-stream-tutorial/'}, {'text': 'Java Networking', 'href': 'https://www.geeksforgeeks.org/java/java-networking/'}, {'text': 'JDBC Tutorial', 'href': 'https://www.geeksforgeeks.org/java/jdbc-tutorial/'}, {'text': 'Java Memory Management', 'href': 'https://www.geeksforgeeks.org/java/java-memory-management/'}, {'text': 'Garbage Collection in Java', 'href': 'https://www.geeksforgeeks.org/java/garbage-collection-in-java/'}, {'text': 'Memory Leaks in Java', 'href': 'https://www.geeksforgeeks.org/java/memory-leaks-in-java/'}, {'text': 'Java Interview Questions and Answers', 'href': 'https://www.geeksforgeeks.org/java/java-interview-questions/'}, {'text': 'Java Programs - Java Programming Examples', 'href': 'https://www.geeksforgeeks.org/java/java-programming-examples/'}, {'text': 'Java Exercises - Basic to Advanced Java Practice Programs with Solutions', 'href': 'https://www.geeksforgeeks.org/java/java-exercises/'}, {'text': 'Java Quiz | Level Up Your Java Skills', 'href': 'https://www.geeksforgeeks.org/java/java-quiz/'}, {'text': 'Top 50 Java Project Ideas For Beginners and Advanced [Update 2025]', 'href': 'https://www.geeksforgeeks.org/blogs/java-projects/'}, {'text': 'Java Backend DevelopmentCourse', 'href': 'https://www.geeksforgeeks.org/courses/Java-backend-live'}, {'text': 'C++', 'href': 'https://www.geeksforgeeks.org/cpp/c-plus-plus/'}, {'text': 'Java Skillup', 'href': 'https://www.geeksforgeeks.org/courses/java-skill-up'}, {'text': 'Advance Java Skillup', 'href': 'https://www.geeksforgeeks.org/courses/advanced-java-skill-up'}, {'text': 'Introduction', 'href': 'https://www.geeksforgeeks.org/java/introduction-to-java/'}, {'text': 'Download and Install Java', 'href': 'https://www.geeksforgeeks.org/linux-unix/download-install-java-windows-linux-macos/'}, {'text': 'JDK vs JRE vs JVM', 'href': 'https://www.geeksforgeeks.org/java/differences-jdk-jre-jvm/'}, {'text': 'Identifiers', 'href': 'https://www.geeksforgeeks.org/java/java-identifiers/'}, {'text': 'Keywords', 'href': 'https://www.geeksforgeeks.org/java/java-keywords/'}, {'text': 'Java Basics and Identifiers', 'href': 'https://www.geeksforgeeks.org/quizzes/java-basics-and-identifiers/'}, {'text': 'Data Types', 'href': 'https://www.geeksforgeeks.org/java/java-data-types/'}, {'text': 'Variables', 'href': 'https://www.geeksforgeeks.org/java/variables-in-java/'}, {'text': 'Operators', 'href': 'https://www.geeksforgeeks.org/java/operators-in-java/'}, {'text': 'Variables', 'href': 'https://www.geeksforgeeks.org/quizzes/java-variables/'}, {'text': 'Operator', 'href': 'https://www.geeksforgeeks.org/quizzes/java-operator/'}, {'text': 'Decision Making (if, if-else, switch, break, continue, jump)', 'href': 'https://www.geeksforgeeks.org/java/decision-making-javaif-else-switch-break-continue-jump/'}, {'text': 'Loops', 'href': 'https://www.geeksforgeeks.org/java/loops-in-java/'}, {'text': 'Control Statements and Loops', 'href': 'https://www.geeksforgeeks.org/quizzes/java-control-statements-and-loops/'}, {'text': 'Introduction to Methods', 'href': 'https://www.geeksforgeeks.org/java/methods-in-java/'}, {'text': 'Static Methods vs Instance Methods', 'href': 'https://www.geeksforgeeks.org/java/static-methods-vs-instance-methods-in-java/'}, {'text': 'Access Modifiers', 'href': 'https://www.geeksforgeeks.org/java/access-modifiers-java/'}, {'text': 'Command Line Arguments', 'href': 'https://www.geeksforgeeks.org/java/command-line-arguments-in-java/'}, {'text': 'Variable Arguments (Varargs)', 'href': 'https://www.geeksforgeeks.org/java/variable-arguments-varargs-in-java/'}, {'text': 'Methods', 'href': 'https://www.geeksforgeeks.org/quizzes/java-methods/'}, {'text': 'Introduction to Arrays', 'href': 'https://www.geeksforgeeks.org/java/arrays-in-java/'}, {'text': 'Declare and Initialize Arrays', 'href': 'https://www.geeksforgeeks.org/java/how-to-declare-and-initialize-an-array-in-java/'}, {'text': 'Multi-Dimensional Arrays', 'href': 'https://www.geeksforgeeks.org/java/multidimensional-arrays-in-java/'}, {'text': 'Java Arrays', 'href': 'https://www.geeksforgeeks.org/quizzes/java-quiz/arrays-gq/'}, {'text': 'Jagged Arrays', 'href': 'https://www.geeksforgeeks.org/java/jagged-array-in-java/'}, {'text': 'Arrays Class', 'href': 'https://www.geeksforgeeks.org/java/array-class-in-java/'}, {'text': 'Final Arrays', 'href': 'https://www.geeksforgeeks.org/java/final-arrays-in-java/'}, {'text': 'Java Array Programs', 'href': 'https://www.geeksforgeeks.org/tag/java-array-programs/'}, {'text': 'Array Programs', 'href': 'https://www.geeksforgeeks.org/quizzes/java-array-programs/'}, {'text': 'Introduction of Strings', 'href': 'https://www.geeksforgeeks.org/java/strings-in-java/'}, {'text': 'Why Strings are Immutable?', 'href': 'https://www.geeksforgeeks.org/java/java-string-is-immutable-what-exactly-is-the-meaning/'}, {'text': 'Java\xa0String Concatenation', 'href': 'https://www.geeksforgeeks.org/java/java-string-concat-examples/'}, {'text': 'String Basics', 'href': 'https://www.geeksforgeeks.org/quizzes/java-string-basics/'}, {'text': 'String Class', 'href': 'https://www.geeksforgeeks.org/java/string-class-in-java/'}, {'text': 'StringBuffer Class', 'href': 'https://www.geeksforgeeks.org/java/stringbuffer-class-in-java/'}, {'text': 'StringBuilder Class', 'href': 'https://www.geeksforgeeks.org/java/stringbuilder-class-in-java-with-examples/'}, {'text': 'String Classes', 'href': 'https://www.geeksforgeeks.org/quizzes/java-string-classes/'}, {'text': 'Strings vs StringBuffer vs StringBuilder', 'href': 'https://www.geeksforgeeks.org/java/string-vs-stringbuilder-vs-stringbuffer-in-java/'}, {'text': 'Java String Programs', 'href': 'https://www.geeksforgeeks.org/tag/java-string-programs/'}, {'text': 'What are OOPs Concepts?', 'href': 'https://www.geeksforgeeks.org/java/object-oriented-programming-oops-concept-in-java/'}, {'text': 'Classes and Objects', 'href': 'https://www.geeksforgeeks.org/java/classes-objects-java/'}, {'text': 'Classes and Objects', 'href': 'https://www.geeksforgeeks.org/quizzes/java-quiz/class-and-object-2-gq/'}, {'text': 'Constructors', 'href': 'https://www.geeksforgeeks.org/java/constructors-in-java/'}, {'text': 'Constructors', 'href': 'https://www.geeksforgeeks.org/quizzes/java-quiz/constructors-2-gq/'}, {'text': 'Object Class', 'href': 'https://www.geeksforgeeks.org/java/object-class-in-java/'}, {'text': 'Abstraction', 'href': 'https://www.geeksforgeeks.org/java/abstraction-in-java-2/'}, {'text': 'Encapsulation', 'href': 'https://www.geeksforgeeks.org/java/encapsulation-in-java/'}, {'text': 'Inheritance', 'href': 'https://www.geeksforgeeks.org/java/inheritance-in-java/'}, {'text': 'Inheritance and Abstraction', 'href': 'https://www.geeksforgeeks.org/quizzes/inheritance-2-gq/'}, {'text': 'Polymorphism', 'href': 'https://www.geeksforgeeks.org/java/polymorphism-in-java/'}, {'text': 'Compile-Time Polymorphism (Method Overloading)', 'href': 'https://www.geeksforgeeks.org/java/method-overloading-in-java/'}, {'text': 'Runtime Polymorphism (Method Overriding)', 'href': 'https://www.geeksforgeeks.org/java/overriding-in-java/'}, {'text': 'Packages', 'href': 'https://www.geeksforgeeks.org/java/packages-in-java/'}, {'text': 'Polymorphism and Packages', 'href': 'https://www.geeksforgeeks.org/quizzes/java-polymorphism-and-packages/'}, {'text': 'Java Interfaces', 'href': 'https://www.geeksforgeeks.org/java/interfaces-in-java/'}, {'text': 'Interfaces and Inheritance', 'href': 'https://www.geeksforgeeks.org/java/interfaces-and-inheritance-in-java/'}, {'text': 'Class vs Interface', 'href': 'https://www.geeksforgeeks.org/java/differences-between-interface-and-class-in-java/'}, {'text': 'Interfaces', 'href': 'https://www.geeksforgeeks.org/quizzes/java-interfaces/'}, {'text': 'Functional Interface', 'href': 'https://www.geeksforgeeks.org/java/java-functional-interfaces/'}, {'text': 'Nested Interface', 'href': 'https://www.geeksforgeeks.org/java/nested-interface-in-java/'}, {'text': 'Marker Interface', 'href': 'https://www.geeksforgeeks.org/java/marker-interface-in-java/'}, {'text': 'Comparator Interface', 'href': 'https://www.geeksforgeeks.org/java/java-comparator-interface/'}, {'text': 'Interface types and Comparator', 'href': 'https://www.geeksforgeeks.org/quizzes/java-interface-types-and-comparator/'}, {'text': 'Java Collection Framework', 'href': 'https://www.geeksforgeeks.org/java/collections-in-java-2/'}, {'text': 'Collections Class', 'href': 'https://www.geeksforgeeks.org/java/collections-class-in-java/'}, {'text': 'Collection Interface', 'href': 'https://www.geeksforgeeks.org/java/collection-interface-in-java-with-examples/'}, {'text': 'Collection', 'href': 'https://www.geeksforgeeks.org/quizzes/java-collection-framework/?ref=quiz_lbp'}, {'text': 'List Interface', 'href': 'https://www.geeksforgeeks.org/java/list-interface-java-examples/'}, {'text': 'ArrayList', 'href': 'https://www.geeksforgeeks.org/java/arraylist-in-java/'}, {'text': 'LinkedList', 'href': 'https://www.geeksforgeeks.org/java/linked-list-in-java/'}, {'text': 'List', 'href': 'https://www.geeksforgeeks.org/quizzes/java-list-interface/'}, {'text': 'ArrayList', 'href': 'https://www.geeksforgeeks.org/quizzes/java-arraylist/?ref=quiz_lbp'}, {'text': 'LinkedList', 'href': 'https://www.geeksforgeeks.org/quizzes/java-linkedlist/'}, {'text': 'Set Interface', 'href': 'https://www.geeksforgeeks.org/java/set-in-java/'}, {'text': 'HashSet', 'href': 'https://www.geeksforgeeks.org/java/hashset-in-java/'}, {'text': 'TreeSet', 'href': 'https://www.geeksforgeeks.org/java/treeset-in-java-with-examples/'}, {'text': 'Set and HashSet', 'href': 'https://www.geeksforgeeks.org/quizzes/java-set-and-hashset-classes/?ref=quiz_lbp'}, {'text': 'Queue Interface', 'href': 'https://www.geeksforgeeks.org/java/queue-interface-java/'}, {'text': 'Priority Queue', 'href': 'https://www.geeksforgeeks.org/java/priority-queue-in-java/'}, {'text': 'Deque Interface', 'href': 'https://www.geeksforgeeks.org/java/deque-interface-java-example/'}, {'text': 'Map Interface', 'href': 'https://www.geeksforgeeks.org/java/map-interface-in-java/'}, {'text': 'HashMap', 'href': 'https://www.geeksforgeeks.org/java/java-util-hashmap-in-java-with-examples/'}, {'text': 'Queue and Map Interface', 'href': 'https://www.geeksforgeeks.org/quizzes/java-queue-and-map-interface/?ref=quiz_lbp'}, {'text': 'Iterator', 'href': 'https://www.geeksforgeeks.org/java/iterators-in-java/'}, {'text': 'Comparator Interface', 'href': 'https://www.geeksforgeeks.org/java/java-comparator-interface/'}, {'text': 'Comparable Interface', 'href': 'https://www.geeksforgeeks.org/java/comparable-interface-in-java-with-examples/'}, {'text': 'Iterators', 'href': 'https://www.geeksforgeeks.org/quizzes/java-iterators/?ref=quiz_lbp'}, {'text': 'Comparator vs Comparable', 'href': 'https://www.geeksforgeeks.org/quizzes/java-comparator-vs-comparable/?ref=quiz_lbp'}, {'text': 'Java Exceptions', 'href': 'https://www.geeksforgeeks.org/java/exceptions-in-java/'}, {'text': 'Checked vs Unchecked Exceptions', 'href': 'https://www.geeksforgeeks.org/java/java-checked-vs-unchecked-exceptions/'}, {'text': 'Try Catch Block', 'href': 'https://www.geeksforgeeks.org/java/java-try-catch-block/'}, {'text': 'Java Exceptions', 'href': 'https://www.geeksforgeeks.org/quizzes/java-exceptions/?ref=quiz_lbp'}, {'text': 'Final, Finally and Finalize', 'href': 'https://www.geeksforgeeks.org/java/java-final-finally-and-finalize/'}, {'text': 'Throw and Throws', 'href': 'https://www.geeksforgeeks.org/java/throw-throws-java/'}, {'text': 'Customized Exception Handling', 'href': 'https://www.geeksforgeeks.org/java/user-defined-custom-exception-in-java/'}, {'text': 'Chained Exceptions', 'href': 'https://www.geeksforgeeks.org/java/chained-exceptions-in-java/'}, {'text': 'Null Pointer Exceptions', 'href': 'https://www.geeksforgeeks.org/java/null-pointer-exception-in-java/'}, {'text': 'Exception Handling with Method Overriding', 'href': 'https://www.geeksforgeeks.org/java/exception-handling-with-method-overriding-in-java/'}, {'text': 'Exception Handling', 'href': 'https://www.geeksforgeeks.org/quizzes/exception-handling-2-gq/'}, {'text': 'Introduction to Java Multithreading', 'href': 'https://www.geeksforgeeks.org/java/java-multithreading-tutorial/'}, {'text': 'Threads', 'href': 'https://www.geeksforgeeks.org/java/java-threads/'}, {'text': 'Thread Class', 'href': 'https://www.geeksforgeeks.org/java/java-lang-thread-class-java/'}, {'text': 'Runnable Interface', 'href': 'https://www.geeksforgeeks.org/java/runnable-interface-in-java/'}, {'text': 'Thread Basics and Lifecycle', 'href': 'https://www.geeksforgeeks.org/quizzes/java-thread-basics-and-lifecycle/?ref=quiz_lbp'}, {'text': 'Lifecycle and States of a Thread', 'href': 'https://www.geeksforgeeks.org/java/lifecycle-and-states-of-a-thread-in-java/'}, {'text': 'Main Thread', 'href': 'https://www.geeksforgeeks.org/java/main-thread-java/'}, {'text': 'Thread Priority in Multithreading', 'href': 'https://www.geeksforgeeks.org/java/java-thread-priority-multithreading/'}, {'text': 'Naming & Feteching Name of Current Thread', 'href': 'https://www.geeksforgeeks.org/java/naming-thread-fetching-name-current-thread-java/'}, {'text': 'Thread.start() vs Thread.run() Method', 'href': 'https://www.geeksforgeeks.org/java/difference-between-thread-start-and-thread-run-in-java/'}, {'text': 'Thread.sleep() Method', 'href': 'https://www.geeksforgeeks.org/java/thread-sleep-method-in-java-with-examples/'}, {'text': 'Daemon Thread', 'href': 'https://www.geeksforgeeks.org/java/daemon-thread-java/'}, {'text': 'Thread Methods and Daemon Threads', 'href': 'https://www.geeksforgeeks.org/quizzes/java-thread-methods-and-daemon-threads/'}, {'text': 'Thread Safety', 'href': 'https://www.geeksforgeeks.org/java/thread-safety-and-how-to-achieve-it-in-java/'}, {'text': 'Thread Pools', 'href': 'https://www.geeksforgeeks.org/java/thread-pools-java/'}, {'text': 'File Handling', 'href': 'https://www.geeksforgeeks.org/java/file-handling-in-java/'}, {'text': 'File Class', 'href': 'https://www.geeksforgeeks.org/java/file-class-in-java/'}, {'text': 'Create Files', 'href': 'https://www.geeksforgeeks.org/java/java-program-to-create-a-new-file/'}, {'text': 'Read Files', 'href': 'https://www.geeksforgeeks.org/java/different-ways-reading-text-file-java/'}, {'text': 'File Handling', 'href': 'https://www.geeksforgeeks.org/quizzes/java-file-handling/?ref=quiz_lbp'}, {'text': 'Write on Files', 'href': 'https://www.geeksforgeeks.org/java/java-program-to-write-into-a-file/'}, {'text': 'Delete File', 'href': 'https://www.geeksforgeeks.org/java/delete-file-using-java/'}, {'text': 'FileReader Class', 'href': 'https://www.geeksforgeeks.org/java/java-io-filereader-class/'}, {'text': 'FileWriter Class', 'href': 'https://www.geeksforgeeks.org/java/filewriter-class-in-java/'}, {'text': 'File Writing', 'href': 'https://www.geeksforgeeks.org/quizzes/java-file-writing/?ref=quiz_lbp'}, {'text': 'FilePermission Class', 'href': 'https://www.geeksforgeeks.org/java/java-io-filepermission-class-java/'}, {'text': 'FileDescriptor Class', 'href': 'https://www.geeksforgeeks.org/java/java-io-filedescriptor-java/'}, {'text': 'Lambda Expressions', 'href': 'https://www.geeksforgeeks.org/java/lambda-expressions-java-8/'}, {'text': 'Method References', 'href': 'https://www.geeksforgeeks.org/java/java-method-references/'}, {'text': 'Java Stream - Complete Tutorial', 'href': 'https://www.geeksforgeeks.org/java/java-8-stream-tutorial/'}, {'text': 'Lambda Expressions and Streams', 'href': 'https://www.geeksforgeeks.org/quizzes/java-lambda-expressions-and-streams/?ref=quiz_lbp'}, {'text': 'Java 8 Features - Complete Tutorial', 'href': 'https://www.geeksforgeeks.org/java/java-8-features/'}, {'text': 'Introduction to Java IO', 'href': 'https://www.geeksforgeeks.org/java/java-io-input-output-in-java-with-examples/'}, {'text': 'Reader Class', 'href': 'https://www.geeksforgeeks.org/java/java-io-reader-class-java/'}, {'text': 'Writer Class', 'href': 'https://www.geeksforgeeks.org/java/java-io-writer-class-java/'}, {'text': 'FileInput Stream', 'href': 'https://www.geeksforgeeks.org/java/java-io-fileinputstream-class-java/'}, {'text': 'IO Basics', 'href': 'https://www.geeksforgeeks.org/quizzes/java-io-basics/?ref=quiz_lbp'}, {'text': 'FileOutput Stream', 'href': 'https://www.geeksforgeeks.org/java/fileoutputstream-in-java/'}, {'text': 'BufferedReader Input Stream', 'href': 'https://www.geeksforgeeks.org/java/ways-to-read-input-from-console-in-java/'}, {'text': 'BufferedReader Output stream', 'href': 'https://www.geeksforgeeks.org/java/java-io-bufferedoutputstream-class-java/'}, {'text': 'BufferedReader vs Scanner', 'href': 'https://www.geeksforgeeks.org/java/java-bufferedreader-vs-scanner-class/'}, {'text': 'Fast I/O', 'href': 'https://www.geeksforgeeks.org/competitive-programming/fast-io-in-java-in-competitive-programming/'}, {'text': 'BufferedReader vs Scanner and Fast I/O', 'href': 'https://www.geeksforgeeks.org/quizzes/java-bufferedreader-vs-scanner-and-fast-io/'}, {'text': 'Java Synchronization', 'href': 'https://www.geeksforgeeks.org/java/synchronization-in-java/'}, {'text': 'Importance of Thread Synchronization', 'href': 'https://www.geeksforgeeks.org/java/importance-of-thread-synchronization-in-java/'}, {'text': 'Method and Block Synchronization', 'href': 'https://www.geeksforgeeks.org/java/method-block-synchronization-java/'}, {'text': 'Synchronization Basics', 'href': 'https://www.geeksforgeeks.org/quizzes/java-synchronization-basics/'}, {'text': 'Atomic vs Volatile', 'href': 'https://www.geeksforgeeks.org/java/difference-between-atomic-volatile-and-synchronized-in-java/'}, {'text': 'vs Synchronized', 'href': 'https://www.geeksforgeeks.org/java/difference-between-atomic-volatile-and-synchronized-in-java/'}, {'text': 'Local Frameworks vs Thread Synchronization', 'href': 'https://www.geeksforgeeks.org/java/lock-framework-vs-thread-synchronization-in-java/'}, {'text': 'Deadlock in Multithreading', 'href': 'https://www.geeksforgeeks.org/java/deadlock-in-java-multithreading/'}, {'text': 'Deadlocks and Synchronization', 'href': 'https://www.geeksforgeeks.org/quizzes/java-deadlocks-and-synchronization/'}, {'text': 'Deadlock Prevention and Avoidance', 'href': 'https://www.geeksforgeeks.org/operating-systems/deadlock-prevention/'}, {'text': 'Lock vs Monitor in Concurrency', 'href': 'https://www.geeksforgeeks.org/java/difference-between-lock-and-monitor-in-java-concurrency/'}, {'text': 'Reentrant Lock', 'href': 'https://www.geeksforgeeks.org/java/reentrant-lock-in-java/'}, {'text': 'Concurrency Locks and Reentrant Locks', 'href': 'https://www.geeksforgeeks.org/quizzes/java-concurrency-locks-and-reentrant-locks/'}, {'text': 'What is Java Regex?', 'href': 'https://www.geeksforgeeks.org/java/regular-expressions-in-java/'}, {'text': 'Pattern Class', 'href': 'https://www.geeksforgeeks.org/java/pattern-pattern-method-in-java-with-examples/'}, {'text': 'Matcher Class', 'href': 'https://www.geeksforgeeks.org/java/matcher-pattern-method-in-java-with-examples/'}, {'text': 'Character Class', 'href': 'https://www.geeksforgeeks.org/java/java-lang-character-class-methods-set-1/'}, {'text': 'Regex Basics and Pattern Matching', 'href': 'https://www.geeksforgeeks.org/quizzes/java-regex-basics-and-pattern-matching/'}, {'text': 'Quantifiers', 'href': 'https://www.geeksforgeeks.org/java/quantifiers-in-java/'}, {'text': 'Introduction to Java Networking', 'href': 'https://www.geeksforgeeks.org/java/java-networking/'}, {'text': 'TCP Architecture', 'href': 'https://www.geeksforgeeks.org/computer-networks/tcp-ip-model/'}, {'text': 'UDP Architecture', 'href': 'https://www.geeksforgeeks.org/computer-networks/user-datagram-protocol-udp/'}, {'text': 'IPV4 vs IPV6', 'href': 'https://www.geeksforgeeks.org/computer-networks/differences-between-ipv4-and-ipv6/'}, {'text': 'Networking Basics and Protocols', 'href': 'https://www.geeksforgeeks.org/quizzes/java-networking-basics-and-protocols/'}, {'text': 'Connection-Oriented vs Connectionless Protocols', 'href': 'https://www.geeksforgeeks.org/computer-networks/difference-between-connection-oriented-and-connection-less-services/'}, {'text': 'Socket Programming', 'href': 'https://www.geeksforgeeks.org/java/socket-programming-in-java/'}, {'text': 'Server Socket Class', 'href': 'https://www.geeksforgeeks.org/java/java-net-serversocket-class-in-java/'}, {'text': 'Sockets and Server Communication', 'href': 'https://www.geeksforgeeks.org/quizzes/java-sockets-and-server-communication/'}, {'text': 'URL Class and Methods', 'href': 'https://www.geeksforgeeks.org/java/url-class-java-examples/'}, {'text': 'Introduction to Java JDBC', 'href': 'https://www.geeksforgeeks.org/java/introduction-to-jdbc/'}, {'text': 'JDBC Driver', 'href': 'https://www.geeksforgeeks.org/java/jdbc-drivers/'}, {'text': 'JDBC Connection', 'href': 'https://www.geeksforgeeks.org/java/establishing-jdbc-connection-in-java/'}, {'text': 'Types of Statements in JDBC', 'href': 'https://www.geeksforgeeks.org/java/types-of-statements-in-jdbc/'}, {'text': 'JDBC', 'href': 'https://www.geeksforgeeks.org/quizzes/java-jdbc/'}, {'text': 'Java Memory Management', 'href': 'https://www.geeksforgeeks.org/java/java-memory-management/'}, {'text': 'How Java Objects Stored in Memory?', 'href': 'https://www.geeksforgeeks.org/java/how-are-java-objects-stored-in-memory/'}, {'text': 'Java Memory Allocation', 'href': 'https://www.geeksforgeeks.org/quizzes/java-memory-allocation/'}, {'text': 'Stack vs Heap Memory Allocation', 'href': 'https://www.geeksforgeeks.org/dsa/stack-vs-heap-memory-allocation/'}, {'text': 'Heap vs Stack', 'href': 'https://www.geeksforgeeks.org/quizzes/java-heap-vs-stack/'}, {'text': 'Java Virtual Machine(JVM) Stack Area', 'href': 'https://www.geeksforgeeks.org/java/java-virtual-machine-jvm-stack-area/'}, {'text': 'Types of Memory Areas Allocated by JVM', 'href': 'https://www.geeksforgeeks.org/java/how-many-types-of-memory-areas-are-allocated-by-jvm/'}, {'text': 'Garbage Collection', 'href': 'https://www.geeksforgeeks.org/java/garbage-collection-in-java/'}, {'text': 'JVM Memory Management and Garbage Collection', 'href': 'https://www.geeksforgeeks.org/quizzes/jvm-memory-management-and-garbage-collection/'}, {'text': 'Types of JVM Garbage Collectors', 'href': 'https://www.geeksforgeeks.org/java/types-of-jvm-garbage-collectors-in-java-with-implementation-details/'}, {'text': 'Heap and Stack Memory Allocation', 'href': 'https://www.geeksforgeeks.org/dsa/stack-vs-heap-memory-allocation/'}, {'text': 'Memory Leaks', 'href': 'https://www.geeksforgeeks.org/java/memory-leaks-in-java/'}, {'text': '200+ Core Java Interview Questions and Answers', 'href': 'https://www.geeksforgeeks.org/java/java-interview-questions/'}, {'text': 'Java MCQ', 'href': 'https://www.geeksforgeeks.org/java/java-multiple-choice-questions/'}, {'text': 'Java Programming Examples', 'href': 'https://www.geeksforgeeks.org/java/java-programming-examples/'}, {'text': 'Java Exercises – Basic to Advanced Java Practice Programs', 'href': 'https://www.geeksforgeeks.org/java/java-exercises/'}, {'text': 'Java Fundamentals Coding Practice Problems', 'href': 'https://www.geeksforgeeks.org/java/java-coding-practice-problems/'}, {'text': 'Java Methods Coding Practice Problems', 'href': 'https://www.geeksforgeeks.org/java/java-methods-coding-practice-problems/'}, {'text': 'Java Arrays Coding Practice Problems', 'href': 'https://www.geeksforgeeks.org/java/java-arrays-coding-practice-problems/'}, {'text': 'Java Strings Coding Practice Problems', 'href': 'https://www.geeksforgeeks.org/java/java-strings-coding-practice-problems/'}, {'text': 'Java OOPs Coding Practice Problems', 'href': 'https://www.geeksforgeeks.org/java/java-oops-coding-practice-problems/'}, {'text': 'Java Sorting and Searching Algorithms Coding Practice Problems', 'href': 'https://www.geeksforgeeks.org/java/java-sorting-and-searching-coding-practice-problems/'}, {'text': 'Java Collections Coding Practice Problems', 'href': 'https://www.geeksforgeeks.org/java/java-collections-coding-practice-problems/'}, {'text': 'Java Stream & Lambda Expression Coding Practice Problems', 'href': 'https://www.geeksforgeeks.org/java/java-stream-lambda-expression-coding-practice-problems/'}, {'text': 'Java Language MCQs with Answers', 'href': 'https://www.geeksforgeeks.org/quizzes/50-java-language-mcqs-with-answers-2/'}, {'text': 'Number Guessing Game', 'href': 'https://www.geeksforgeeks.org/dsa/number-guessing-game-in-java/'}, {'text': 'Simple Banking Application', 'href': 'https://www.geeksforgeeks.org/java/mini-banking-application-in-java/'}, {'text': 'Currency Converter', 'href': 'https://www.geeksforgeeks.org/java/java-program-to-convert-currency-using-awt/'}, {'text': 'Tic-Tac-Toe Game', 'href': 'https://www.geeksforgeeks.org/java/tic-tac-toe-game-in-java/'}, {'text': 'Snake Game', 'href': 'https://www.geeksforgeeks.org/advance-java/design-snake-game/'}, {'text': 'Memory Game', 'href': 'https://www.geeksforgeeks.org/java/memory-game-in-java/'}, {'text': 'Chat Application', 'href': 'https://www.geeksforgeeks.org/java/simple-chat-application-using-sockets-in-java/'}, {'text': 'Face Detection System', 'href': 'https://www.geeksforgeeks.org/java/image-processing-in-java-face-detection/'}, {'text': 'Social Networking Site', 'href': 'https://www.geeksforgeeks.org/system-design/design-scalable-system-like-instagram/'}, {'text': 'Text Editor', 'href': 'https://www.geeksforgeeks.org/java/java-swing-create-a-simple-text-editor/'}, {'text': 'Google', 'href': 'https://www.geeksforgeeks.org/interview-experiences/google-recruitment-process/'}, {'text': 'Amazon', 'href': 'https://www.geeksforgeeks.org/interview-experiences/amazon-recruitment-process/'}, {'text': 'Netflix', 'href': 'https://www.geeksforgeeks.org/interview-experiences/netflix-recruitment-process/'}, {'text': 'Airbnb', 'href': 'https://www.geeksforgeeks.org/tag/airbnb/'}, {'text': 'Uber', 'href': 'https://www.geeksforgeeks.org/tag/uber/'}, {'text': 'Visit Course', 'href': 'https://www.geeksforgeeks.org/courses/java-online-course-complete-beginner-to-advanced'}, {'text': 'Campus Training Program', 'href': 'https://www.geeksforgeeks.org/campus-training-program/'}, {'text': 'Next Article', 'href': 'https://www.geeksforgeeks.org/java/introduction-to-java'}, {'text': 'Introduction to Java', 'href': 'https://www.geeksforgeeks.org/java/introduction-to-java'}, {'text': 'K', 'href': 'https://www.geeksforgeeks.org/user/kartik/'}, {'text': 'kartik', 'href': 'https://www.geeksforgeeks.org/user/kartik/'}, {'text': 'Java', 'href': 'https://www.geeksforgeeks.org/category/programming-language/java/'}, {'text': 'Tutorials', 'href': 'https://www.geeksforgeeks.org/tag/tutorials/'}, {'text': 'Java', 'href': 'https://www.geeksforgeeks.org/explore?category=Java'}, {'text': '491k+ interested GeeksComplete Machine Learning & Data Science ProgramExplore', 'href': 'https://www.geeksforgeeks.org/courses/data-science-live'}, {'text': '265k+ interested GeeksMaster Competitive Programming - Complete Beginner to AdvancedExplore', 'href': 'https://www.geeksforgeeks.org/courses/competitive-programming-cp'}, {'text': '2k+ interested GeeksComplete Python Program - Mastering from Fundamentals to Advanced ConceptsExplore', 'href': 'https://www.geeksforgeeks.org/courses/python-program-mastering-from-fundamentals-to-advanced-concepts'}, {'text': 'Advertise with us', 'href': 'https://www.geeksforgeeks.org/advertise-with-us/'}, {'text': 'About Us', 'href': 'https://www.geeksforgeeks.org/about/'}, {'text': 'Legal', 'href': 'https://www.geeksforgeeks.org/legal/'}, {'text': 'Privacy Policy', 'href': 'https://www.geeksforgeeks.org/legal/privacy-policy/'}, {'text': 'Careers', 'href': 'https://geeksforgeeks.zohorecruit.in/careers'}, {'text': 'In Media', 'href': 'https://www.geeksforgeeks.org/press-release/'}, {'text': 'Contact Us', 'href': 'https://www.geeksforgeeks.org/about/contact-us/'}, {'text': 'Corporate Solution', 'href': 'https://www.geeksforgeeks.org/gfg-corporate-solution/'}, {'text': 'Campus Training Program', 'href': 'https://www.geeksforgeeks.org/campus-training-program/'}, {'text': 'Job-A-Thon', 'href': 'https://practice.geeksforgeeks.org/events/rec/job-a-thon/'}, {'text': 'Offline Classroom Program', 'href': 'https://www.geeksforgeeks.org/courses/category/all?courseType=offline&courseFeeType=all'}, {'text': 'DSA in JAVA/C++', 'href': 'https://www.geeksforgeeks.org/courses/dsa-self-paced'}, {'text': 'Master System Design', 'href': 'https://www.geeksforgeeks.org/courses/mastering-system-design-low-level-to-high-level-solutions'}, {'text': 'Master CP', 'href': 'https://www.geeksforgeeks.org/courses/competitive-programming-cp'}, {'text': 'Videos', 'href': 'https://www.geeksforgeeks.org/videos/'}, {'text': 'Python', 'href': 'https://www.geeksforgeeks.org/python-programming-language/'}, {'text': 'Java', 'href': 'https://www.geeksforgeeks.org/java/'}, {'text': 'C++', 'href': 'https://www.geeksforgeeks.org/c-plus-plus/'}, {'text': 'PHP', 'href': 'https://www.geeksforgeeks.org/php-tutorials/'}, {'text': 'GoLang', 'href': 'https://www.geeksforgeeks.org/golang/'}, {'text': 'SQL', 'href': 'https://www.geeksforgeeks.org/sql-tutorial/'}, {'text': 'R Language', 'href': 'https://www.geeksforgeeks.org/r-tutorial/'}, {'text': 'Android', 'href': 'https://www.geeksforgeeks.org/android-tutorial/'}, {'text': 'DSA', 'href': 'https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/'}, {'text': 'DSA Tutorial', 'href': 'https://www.geeksforgeeks.org/dsa-tutorial-learn-data-structures-and-algorithms/'}, {'text': 'Problem Of The Day', 'href': 'https://www.geeksforgeeks.org/problem-of-the-day'}, {'text': 'GfG 160', 'href': 'https://www.geeksforgeeks.org/courses/gfg-160-series'}, {'text': 'DSA 360', 'href': 'https://www.geeksforgeeks.org/courses/dsa-skill-up'}, {'text': 'DSA Roadmap', 'href': 'https://www.geeksforgeeks.org/complete-roadmap-to-learn-dsa-from-scratch/'}, {'text': 'DSA Interview Questions', 'href': 'https://www.geeksforgeeks.org/top-100-data-structure-and-algorithms-dsa-interview-questions-topic-wise/'}, {'text': 'Competitive Programming', 'href': 'https://www.geeksforgeeks.org/competitive-programming-a-complete-guide/'}, {'text': 'Data Science & ML', 'href': 'https://www.geeksforgeeks.org/ai-ml-ds/'}, {'text': 'Data Science With Python', 'href': 'https://www.geeksforgeeks.org/data-science-tutorial/'}, {'text': 'Machine Learning', 'href': 'https://www.geeksforgeeks.org/machine-learning/'}, {'text': 'ML Maths', 'href': 'https://www.geeksforgeeks.org/machine-learning-mathematics/'}, {'text': 'Data Visualisation', 'href': 'https://www.geeksforgeeks.org/python-data-visualization-tutorial/'}, {'text': 'Pandas', 'href': 'https://www.geeksforgeeks.org/pandas-tutorial/'}, {'text': 'NumPy', 'href': 'https://www.geeksforgeeks.org/numpy-tutorial/'}, {'text': 'NLP', 'href': 'https://www.geeksforgeeks.org/natural-language-processing-nlp-tutorial/'}, {'text': 'Deep Learning', 'href': 'https://www.geeksforgeeks.org/deep-learning-tutorial/'}, {'text': 'Web Technologies', 'href': 'https://www.geeksforgeeks.org/web-technology/'}, {'text': 'HTML', 'href': 'https://www.geeksforgeeks.org/html/'}, {'text': 'CSS', 'href': 'https://www.geeksforgeeks.org/css/'}, {'text': 'JavaScript', 'href': 'https://www.geeksforgeeks.org/javascript/'}, {'text': 'TypeScript', 'href': 'https://www.geeksforgeeks.org/typescript/'}, {'text': 'ReactJS', 'href': 'https://www.geeksforgeeks.org/learn-reactjs/'}, {'text': 'NextJS', 'href': 'https://www.geeksforgeeks.org/nextjs/'}, {'text': 'NodeJs', 'href': 'https://www.geeksforgeeks.org/nodejs/'}, {'text': 'Bootstrap', 'href': 'https://www.geeksforgeeks.org/bootstrap/'}, {'text': 'Tailwind CSS', 'href': 'https://www.geeksforgeeks.org/tailwind-css/'}, {'text': 'Python Tutorial', 'href': 'https://www.geeksforgeeks.org/python-programming-language/'}, {'text': 'Python Examples', 'href': 'https://www.geeksforgeeks.org/python-programming-examples/'}, {'text': 'Django Tutorial', 'href': 'https://www.geeksforgeeks.org/django-tutorial/'}, {'text': 'Python Projects', 'href': 'https://www.geeksforgeeks.org/python-projects-beginner-to-advanced/'}, {'text': 'Python Tkinter', 'href': 'https://www.geeksforgeeks.org/python-tkinter-tutorial/'}, {'text': 'Web Scraping', 'href': 'https://www.geeksforgeeks.org/python-web-scraping-tutorial/'}, {'text': 'OpenCV Tutorial', 'href': 'https://www.geeksforgeeks.org/opencv-python-tutorial/'}, {'text': 'Python Interview Question', 'href': 'https://www.geeksforgeeks.org/python-interview-questions/'}, {'text': 'GATE CS Notes', 'href': 'https://www.geeksforgeeks.org/gate-cs-notes-gq/'}, {'text': 'Operating Systems', 'href': 'https://www.geeksforgeeks.org/operating-systems/'}, {'text': 'Computer Network', 'href': 'https://www.geeksforgeeks.org/computer-network-tutorials/'}, {'text': 'Database Management System', 'href': 'https://www.geeksforgeeks.org/dbms/'}, {'text': 'Software Engineering', 'href': 'https://www.geeksforgeeks.org/software-engineering/'}, {'text': 'Digital Logic Design', 'href': 'https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/'}, {'text': 'Engineering Maths', 'href': 'https://www.geeksforgeeks.org/engineering-mathematics-tutorials/'}, {'text': 'DevOps', 'href': 'https://www.geeksforgeeks.org/devops-tutorial/'}, {'text': 'Git', 'href': 'https://www.geeksforgeeks.org/git-tutorial/'}, {'text': 'AWS', 'href': 'https://www.geeksforgeeks.org/aws-tutorial/'}, {'text': 'Docker', 'href': 'https://www.geeksforgeeks.org/docker-tutorial/'}, {'text': 'Kubernetes', 'href': 'https://www.geeksforgeeks.org/kubernetes-tutorial/'}, {'text': 'Azure', 'href': 'https://www.geeksforgeeks.org/microsoft-azure/'}, {'text': 'GCP', 'href': 'https://www.geeksforgeeks.org/google-cloud-platform-tutorial/'}, {'text': 'DevOps Roadmap', 'href': 'https://www.geeksforgeeks.org/devops-roadmap/'}, {'text': 'System Design', 'href': 'https://www.geeksforgeeks.org/system-design-tutorial/'}, {'text': 'High Level Design', 'href': 'https://www.geeksforgeeks.org/what-is-high-level-design-learn-system-design/'}, {'text': 'Low Level Design', 'href': 'https://www.geeksforgeeks.org/what-is-low-level-design-or-lld-learn-system-design/'}, {'text': 'UML Diagrams', 'href': 'https://www.geeksforgeeks.org/unified-modeling-language-uml-introduction/'}, {'text': 'Interview Guide', 'href': 'https://www.geeksforgeeks.org/system-design-interview-guide/'}, {'text': 'Design Patterns', 'href': 'https://www.geeksforgeeks.org/software-design-patterns/'}, {'text': 'OOAD', 'href': 'https://www.geeksforgeeks.org/object-oriented-analysis-and-design/'}, {'text': 'System Design Bootcamp', 'href': 'https://www.geeksforgeeks.org/system-design-interview-bootcamp-guide/'}, {'text': 'Interview Questions', 'href': 'https://www.geeksforgeeks.org/most-commonly-asked-system-design-interview-problems-questions/'}, {'text': 'Mathematics', 'href': 'https://www.geeksforgeeks.org/maths/'}, {'text': 'Physics', 'href': 'https://www.geeksforgeeks.org/physics/'}, {'text': 'Chemistry', 'href': 'https://www.geeksforgeeks.org/chemistry/'}, {'text': 'Biology', 'href': 'https://www.geeksforgeeks.org/biology/'}, {'text': 'Social Science', 'href': 'https://www.geeksforgeeks.org/social-science/'}, {'text': 'English Grammar', 'href': 'https://www.geeksforgeeks.org/english-grammar/'}, {'text': 'Databases', 'href': 'https://www.geeksforgeeks.org/getting-started-with-database-management-system/'}, {'text': 'SQL', 'href': 'https://www.geeksforgeeks.org/sql-tutorial/'}, {'text': 'MYSQL', 'href': 'https://www.geeksforgeeks.org/mysql-tutorial/'}, {'text': 'PostgreSQL', 'href': 'https://www.geeksforgeeks.org/postgresql-tutorial/'}, {'text': 'PL/SQL', 'href': 'https://www.geeksforgeeks.org/pl-sql-tutorial/'}, {'text': 'MongoDB', 'href': 'https://www.geeksforgeeks.org/mongodb-tutorial/'}, {'text': 'Preparation Corner', 'href': 'https://www.geeksforgeeks.org/technical-interview-preparation/'}, {'text': 'Company-Wise Recruitment Process', 'href': 'https://www.geeksforgeeks.org/company-wise-recruitment-process/'}, {'text': 'Aptitude Preparation', 'href': 'https://www.geeksforgeeks.org/aptitude-questions-and-answers/'}, {'text': 'Puzzles', 'href': 'https://www.geeksforgeeks.org/puzzles/'}, {'text': 'Company-Wise Preparation', 'href': 'https://www.geeksforgeeks.org/company-preparation/'}, {'text': 'More Tutorials', 'href': 'https://www.geeksforgeeks.org/geeksforgeeks-online-tutorials-free/'}, {'text': 'Software Development', 'href': 'https://www.geeksforgeeks.org/software-development/'}, {'text': 'Software Testing', 'href': 'https://www.geeksforgeeks.org/software-testing-tutorial/'}, {'text': 'Product Management', 'href': 'https://www.geeksforgeeks.org/product-management/'}, {'text': 'Project Management', 'href': 'https://www.geeksforgeeks.org/project-management-tutorial/'}, {'text': 'Linux', 'href': 'https://www.geeksforgeeks.org/linux-tutorial/'}, {'text': 'Excel', 'href': 'https://www.geeksforgeeks.org/excel-tutorial/'}, {'text': 'All Cheat Sheets', 'href': 'https://www.geeksforgeeks.org/geeksforgeeks-master-sheet-list-of-all-cheat-sheets/'}, {'text': 'IBM Certification Courses', 'href': 'https://www.geeksforgeeks.org/courses/category/ibm-certification'}, {'text': 'DSA and Placements', 'href': 'https://www.geeksforgeeks.org/courses/category/dsa-placements'}, {'text': 'Web Development', 'href': 'https://www.geeksforgeeks.org/courses/category/development-testing'}, {'text': 'Data Science', 'href': 'https://www.geeksforgeeks.org/courses/category/machine-learning-data-science'}, {'text': 'Programming Languages', 'href': 'https://www.geeksforgeeks.org/courses/category/programming-languages'}, {'text': 'DevOps & Cloud', 'href': 'https://www.geeksforgeeks.org/courses/category/cloud-devops'}, {'text': 'C Programming with Data Structures', 'href': 'https://www.geeksforgeeks.org/courses/c-Programming-basic-to-advanced'}, {'text': 'C++ Programming Course', 'href': 'https://www.geeksforgeeks.org/courses/cpp-programming-basic-to-advanced'}, {'text': 'Java Programming Course', 'href': 'https://www.geeksforgeeks.org/courses/java-online-course-complete-beginner-to-advanced'}, {'text': 'Python Full Course', 'href': 'https://www.geeksforgeeks.org/courses/master-python-complete-beginner-to-advanced'}, {'text': 'DevOps Engineering', 'href': 'https://www.geeksforgeeks.org/courses/devops-live'}, {'text': 'AWS Solutions Architect Certification', 'href': 'https://www.geeksforgeeks.org/courses/AWS-solutions-architect-certification-training-program-live'}, {'text': 'Salesforce Certified Administrator Course', 'href': 'https://www.geeksforgeeks.org/courses/salesforce-certified-administrator'}, {'text': 'GATE 2026', 'href': 'https://www.geeksforgeeks.org/courses/category/gate'}, {'text': 'GATE CS Rank Booster', 'href': 'https://www.geeksforgeeks.org/courses/gate-rank-booster'}, {'text': 'GATE DA Rank Booster', 'href': 'https://www.geeksforgeeks.org/courses/gate-da-rank-booster'}, {'text': 'GATE CS & IT Course - 2026', 'href': 'https://www.geeksforgeeks.org/courses/gate-2026-csit'}, {'text': 'GATE DA Course 2026', 'href': 'https://www.geeksforgeeks.org/courses/gate-da-2026'}, {'text': 'GATE Rank Predictor', 'href': 'https://www.geeksforgeeks.org/gate-rank-predictor'}, {'text': '@GeeksforGeeks, Sanchhaya Education Private Limited', 'href': 'https://www.geeksforgeeks.org/'}, {'text': 'All rights reserved', 'href': 'https://www.geeksforgeeks.org/copyright-information/'}, {'text': 'Cookie Policy', 'href': 'https://www.geeksforgeeks.org/cookie-policy/'}, {'text': 'Privacy Policy', 'href': 'https://www.geeksforgeeks.org/privacy-policy/'}, {'text': 'Interview Experiences', 'href': 'https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0'}, {'text': 'Admission Experiences', 'href': 'https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede'}, {'text': 'Career Journeys', 'href': 'https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31'}, {'text': 'Work Experiences', 'href': 'https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f'}, {'text': 'Campus Experiences', 'href': 'https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae'}, {'text': 'Competitive Exam Experiences', 'href': 'https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2'}, {'text': 'Privacy Policy', 'href': 'https://www.geeksforgeeks.org/privacy-policy/'}, {'text': 'Cookie Policy.', 'href': 'https://www.geeksforgeeks.org/legal/privacy-policy/#:~:text=the%20appropriate%20measures.-,COOKIE%20POLICY,-A%20cookie%20is'}], 'tables': [[['Career', 'Average Salary (INR) Per Annum', 'Average Salary (USD) Per Annum'], ['Java Developer', '₹400,000 – ₹1,200,000', '$55,000 – $100,000'], ['Full Stack Java Developer', '₹700,000 – ₹1,800,000', '$75,000 – $130,000'], ['Backend Engineer (Java)', '₹800,000 – ₹2,000,000', '$80,000 – $140,000'], ['Android Developer (Java/Kotlin)', '₹500,000 – ₹1,500,000', '$60,000 – $110,000'], ['Java Architect', '₹1,500,000 – ₹3,000,000', '$120,000 – $170,000'], ['DevOps Engineer (Java projects)', '₹900,000 – ₹2,200,000', '$90,000 – $150,000'], ['Big Data Engineer (Java + Hadoop)', '₹1,000,000 – ₹2,500,000', '$100,000 – $160,000'], ['Automation Test Engineer (Java + Selenium)', '₹600,000 – ₹1,400,000', '$65,000 – $110,000'], ['Software Engineer (Java Spring Boot)', '₹700,000 – ₹1,800,000', '$75,000 – $130,000'], ['Java Consultant / Technical Lead', '₹1,200,000 – ₹2,800,000', '$110,000 – $160,000']], [['Company', 'Description'], ['Google', 'Uses Java for Android development, backend services, and internal tools across products like Gmail and Google Drive.'], ['Amazon', 'Java is widely used at Amazon for building scalable backend systems, AWS services, and e-commerce infrastructure.'], ['Netflix', "Java powers many of Netflix's backend microservices, helping deliver content to millions of users with high availability."], ['Spotify', 'Relies on Java for data processing, backend APIs, and scalable microservices that support music streaming.'], ['Airbnb', 'Uses Java in its backend systems to handle listings, payments, and user interactions at scale.'], ['Uber', 'Employs Java for real-time dispatch systems, geolocation services, and backend microservices.'], ['LinkedIn', 'Java is a core language for building LinkedIn’s backend architecture, handling data-intensive workloads and APIs.'], ['eBay', 'Uses Java for high-traffic applications, auction management, and payment services.'], ['NASA', 'Implements Java in various projects, including simulations, data analysis tools, and mission-critical software.'], ['Intel', 'Uses Java in embedded systems, performance testing tools, and internal applications across chip development']]], 'meta': [{'viewport': 'width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=3.0'}, {'robots': 'index, follow, max-image-preview:large, max-snippet:-1'}, {'theme-color': '#308D46'}, {'image': 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png'}, {'og:image:type': 'image/png'}, {'og:image:width': '200'}, {'og:image:height': '200'}, {'facebook-domain-verification': 'xo7t4ve2wn3ywfkjdvwbrk01pvdond'}, {'og:title': 'Java Tutorial - Learn Java Programming - GeeksforGeeks'}, {'description': 'Your All-in-One Learning Portal: GeeksforGeeks is a comprehensive educational platform that empowers learners across domains-spanning computer science and programming, school education, upskilling, commerce, software tools, competitive exams, and more.'}, {'og:url': 'https://www.geeksforgeeks.org/java/java/'}, {'keywords': 'Java programming language, Write Once Run Anywhere, Java Virtual Machine, object-oriented programming, Java frameworks, Java collections framework, Java exception handling, Java multithreading, Java file handling, Java streams and lambda expressions, Java database connectivity, Java memory management, Java networking, Java interview questions, Java career opportunities'}, {'og:site_name': 'GeeksforGeeks'}, {'og:image': 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png'}, {'article:section': 'Java'}, {'article:tag': 'Tutorials'}, {'og:type': 'article'}, {'og:locale': 'en_US'}, {'article:published_time': '2024-06-12 11:21:32+00:00'}, {'article:modified_time': '2025-07-23 16:56:48+00:00'}, {'og:updated_time': '2025-07-23 16:56:48+00:00'}, {'og:image:secure_url': 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png'}, {'og:description': 'Your All-in-One Learning Portal: GeeksforGeeks is a comprehensive educational platform that empowers learners across domains-spanning computer science and programming, school education, upskilling, commerce, software tools, competitive exams, and more.'}, {'msapplication-TileImage': 'https://www.geeksforgeeks.org/wp-content/uploads/gfg_200X200.png'}, {'viewport': 'width=device-width, initial-scale=1.0'}], 'content_blocks': ["Skip to content Courses DSA to Development GATE 2026 Prep Get 3 IBM Certifications For Working Professionals Interview 101: DSA & System Design Data Science Training Program JAVA Backend Development (Live) Data Analytics Training DevOps Engineering (LIVE) Data Structures & Algorithms in Python For Students Placement Preparation with DSA Data Science (Live) Data Structure & Algorithm-Self Paced (C++/JAVA) Master Competitive Programming Full Stack Development with React & Node JS (Live) (NEW) Digital Marketing Program Full Stack Development Data Science & ML Program All Courses Tutorials Python Java Data Structures & Algorithms ML & Data Science Interview Corner Programming Languages Web Development GATE CS Subjects DevOps And Linux School Learning Software and Tools Practice Practice Coding Problems Nation Skillup- Free Courses Problem of the Day ETS TOEFL: Scholarship Contest Jobs Become a Mentor Apply Now! Post Jobs Job-A-Thon: Hiring Challenge Switch to Dark Mode Notifications Mark all as read All View All Notifications Mark all as read All Unread Read You're all caught up!! Sign In", "Courses DSA to Development GATE 2026 Prep Get 3 IBM Certifications For Working Professionals Interview 101: DSA & System Design Data Science Training Program JAVA Backend Development (Live) Data Analytics Training DevOps Engineering (LIVE) Data Structures & Algorithms in Python For Students Placement Preparation with DSA Data Science (Live) Data Structure & Algorithm-Self Paced (C++/JAVA) Master Competitive Programming Full Stack Development with React & Node JS (Live) (NEW) Digital Marketing Program Full Stack Development Data Science & ML Program All Courses Tutorials Python Java Data Structures & Algorithms ML & Data Science Interview Corner Programming Languages Web Development GATE CS Subjects DevOps And Linux School Learning Software and Tools Practice Practice Coding Problems Nation Skillup- Free Courses Problem of the Day ETS TOEFL: Scholarship Contest Jobs Become a Mentor Apply Now! Post Jobs Job-A-Thon: Hiring Challenge Switch to Dark Mode Notifications Mark all as read All View All Notifications Mark all as read All Unread Read You're all caught up!! Sign In", "Notifications Mark all as read All View All Notifications Mark all as read All Unread Read You're all caught up!!", 'Java Course Java Arrays Java Strings Java OOPs Java Collection Java 8 Tutorial Java Multithreading Java Exception Handling Java Programs Java Project Java Collections Interview Java Interview Questions Java MCQs Spring Spring MVC Spring Boot Hibernate', 'What kind of Experience do you want to share? Interview Experiences Admission Experiences Career Journeys Work Experiences Campus Experiences Competitive Exam Experiences', 'Java Tutorial Last Updated : 23 Jul, 2025 Comments Improve Suggest changes 363 Likes Like Report Java is a high-level, object-oriented programming language used to build web apps, mobile applications, and enterprise software systems. It is known for its Write Once, Run Anywhere capability, which means code written in Java can run on any device that supports the Java Virtual Machine (JVM). Java syntax and structure is similar to C-based languages like C++ and C#. Its robustness, platform-independent compatibility, and strong memory management have made it a go-to language for developers worldwide. Previous Pause Next 7 / 9 This Java tutorial is designed for both beginners and experienced professionals and it covers basic to advanced Java topics. Do you wish to learn Java in a scheduled manner ? Try our ongoing free course Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Do you wish to learn Advance Java in scheduled manner? Try our ongoing free course Advance Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Why Learn Java? Java is used to build Android apps, desktop and web apps, enterprise backend systems, and cloud-based software. Java is in high demand with many job opportunities in software development. Java has popular frameworks like Spring and Hibernate which makes Java powerful for enterprise applications. Java supports object-oriented programming for clean and reusable code. It runs on all platforms Windows, Mac, and Linux using the JVM. Top companies like Amazon, Netflix, and LinkedIn use Java. Java Hello World Program Here is a simple Java program that prints "Hello World". Java // A Java program to print "Hello World" public class Geeks { public static void main ( String args [] ) { System . out . println ( "Hello World" ); } } // A Java program to print "Hello World" public class Geeks { public static void main ( String args []) { System . out . println ( "Hello World" ); } } Output Hello World Java Basics Java basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals. Mastering these fundamentals is key to building strong, error-free Java applications: Introduction Download and Install Java JDK vs JRE vs JVM Identifiers Keywords Quiz : Java Basics and Identifiers Data Types Variables Operators Quiz : Variables , Operator Decision Making (if, if-else, switch, break, continue, jump) Loops Quiz : Control Statements and Loops Java Methods Java methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier: Introduction to Methods Static Methods vs Instance Methods Access Modifiers Command Line Arguments Variable Arguments (Varargs) Quiz : Methods Java Arrays Java arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions: Introduction to Arrays Declare and Initialize Arrays Multi-Dimensional Arrays Quiz: Java Arrays Jagged Arrays Arrays Class Final Arrays Java Array Programs Quiz: Array Programs Java Strings Java Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed: Introduction of Strings Why Strings are Immutable? Java\xa0String Concatenation Quiz : String Basics String Class StringBuffer Class StringBuilder Class Quiz: String Classes Strings vs StringBuffer vs StringBuilder Java String Programs Java OOPs Concepts Java follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable: What are OOPs Concepts? Classes and Objects Quiz: Classes and Objects Constructors Quiz : Constructors Object Class Abstraction Encapsulation Inheritance Quiz : Inheritance and Abstraction Polymorphism Compile-Time Polymorphism (Method Overloading) Runtime Polymorphism (Method Overriding) Packages Quiz : Polymorphism and Packages Java Interfaces Java interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach: Java Interfaces Interfaces and Inheritance Class vs Interface Quiz: Interfaces Functional Interface Nested Interface Marker Interface Comparator Interface Quiz : Interface types and Comparator Java Collections Java Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap: Java Collection Framework Collections Class Collection Interface Quiz: Collection List Interface ArrayList LinkedList Quiz : List , ArrayList , LinkedList Set Interface HashSet TreeSet Quiz : Set and HashSet Queue Interface Priority Queue Deque Interface Map Interface HashMap Quiz: Queue and Map Interface Iterator Comparator Interface Comparable Interface Quiz : Iterators , Comparator vs Comparable Java Exception Handling ava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions: Java Exceptions Checked vs Unchecked Exceptions Try Catch Block Quiz: Java Exceptions Final, Finally and Finalize Throw and Throws Customized Exception Handling Chained Exceptions Null Pointer Exceptions Exception Handling with Method Overriding Quiz : Exception Handling Java Multithreading Java Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks like parallel processing and responsive applications: Introduction to Java Multithreading Threads Thread Class Runnable Interface Quiz: Thread Basics and Lifecycle Lifecycle and States of a Thread Main Thread Thread Priority in Multithreading Naming & Feteching Name of Current Thread Thread.start() vs Thread.run() Method Thread.sleep() Method Daemon Thread Quiz : Thread Methods and Daemon Threads Thread Safety Thread Pools Java File Handling Java File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from the java.io and java.nio packages for efficient file operations: File Handling File Class Create Files Read Files Quiz: File Handling Write on Files Delete File FileReader Class FileWriter Class Quiz: File Writing FilePermission Class FileDescriptor Class Java Streams and Lambda Expressions Java Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data: Lambda Expressions Method References Java Stream - Complete Tutorial Quiz: Lambda Expressions and Streams Java 8 Features - Complete Tutorial Java IO Java IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of the java.io package and supports both byte and character streams: Introduction to Java IO Reader Class Writer Class FileInput Stream Quiz : IO Basics FileOutput Stream BufferedReader Input Stream BufferedReader Output stream BufferedReader vs Scanner Fast I/O Quiz : BufferedReader vs Scanner and Fast I/O Java Synchronization Java Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency: Java Synchronization Importance of Thread Synchronization Method and Block Synchronization Quiz : Synchronization Basics Atomic vs Volatile vs Synchronized Local Frameworks vs Thread Synchronization Deadlock in Multithreading Quiz : Deadlocks and Synchronization Deadlock Prevention and Avoidance Lock vs Monitor in Concurrency Reentrant Lock Quiz : Concurrency Locks and Reentrant Locks Java Regex Java Regex (Regular Expressions) allows pattern matching and text manipulation using the java.util.regex package. It is powerful for validating, searching, and replacing strings based on specific patterns: What is Java Regex? Pattern Class Matcher Class Character Class Quiz : Regex Basics and Pattern Matching Quantifiers Java Networking Java Networking enables communication between devices over a network using classes from the java.net package. It supports protocols like TCP and UDP for building client-server applications and data exchange: Introduction to Java Networking TCP Architecture UDP Architecture IPV4 vs IPV6 Quiz : Networking Basics and Protocols Connection-Oriented vs Connectionless Protocols Socket Programming Server Socket Class Quiz: Sockets and Server Communication URL Class and Methods Java Database Connectivity(JDBC) Introduction to Java JDBC JDBC Driver JDBC Connection Types of Statements in JDBC Quiz : JDBC Java Memory Allocation Java Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically: Java Memory Management How Java Objects Stored in Memory? Quiz : Java Memory Allocation Stack vs Heap Memory Allocation Quiz : Heap vs Stack Java Virtual Machine(JVM) Stack Area Types of Memory Areas Allocated by JVM Garbage Collection Quiz: JVM Memory Management and Garbage Collection Types of JVM Garbage Collectors Heap and Stack Memory Allocation Memory Leaks Java Interview Questions Prepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate: 200+ Core Java Interview Questions and Answers Java MCQ Best Approach to Learn Java Here’s the step-by-step approach to learn and master Java efficiently and effectively: 1. Understand Java Fundamentals: Start with the basics: what Java is, how it works (JVM, JRE, JDK), and why it’s platform-independent. Learn about Java’s role in building desktop, web, and mobile applications. 2. Set Up the Java Environment: Install the latest JDK and configure your development environment. Use a beginner-friendly IDE like IntelliJ IDEA, Eclipse, or VS Code for writing and testing your code. 3. Learn Core Java Concepts: Focus on essential topics like variables, data types, operators, control structures (if-else, switch, loops), and input/output. Practice writing simple programs to strengthen your understanding. 4. Master Object-Oriented Programming (OOP): Dive into the pillars of OOP—classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Understand how Java handles these concepts and how to apply them effectively in real projects. 5. Explore Collections and Data Structures: Learn about Java\'s Collection Framework—ArrayList, HashMap, Set, LinkedList, and more. Understand how to use them and when to choose one over the other. 6. Work with Exception Handling: Understand the importance of error handling in Java using try-catch blocks, finally, throw, and custom exceptions. Learn best practices for writing clean, safe code. 7. Get Comfortable with File I/O: Learn how Java reads from and writes to files using File , FileReader , BufferedReader , FileWriter , and Streams . Practice creating programs that manage and manipulate file data. 8. Understand Multithreading and Concurrency: Grasp the basics of threads, synchronization, and concurrent programming. Learn how Java handles multiple tasks simultaneously using the Thread class and ExecutorService . 9. Learn Java Libraries and APIs: Familiarize yourself with essential APIs like Java Math, Date & Time (java.time), and String manipulation. Explore popular libraries like Apache Commons, Gson, or Jackson for real-world development. 10. Build Real-World Projects: Apply your knowledge by building console apps, file management systems, or basic desktop GUIs using JavaFX or Swing. Gradually move into web development with Java Servlets, JSP, or Spring Boot. Java Program Examples Java Programming Examples Java Exercises – Basic to Advanced Java Practice Programs Java Coding Practice Problems Java Fundamentals Coding Practice Problems Java Methods Coding Practice Problems Java Arrays Coding Practice Problems Java Strings Coding Practice Problems Java OOPs Coding Practice Problems Java Sorting and Searching Algorithms Coding Practice Problems Java Collections Coding Practice Problems Java Stream & Lambda Expression Coding Practice Problems Java Quizzes and MCQs Java Language MCQs with Answers Important Java Projects Number Guessing Game Simple Banking Application Currency Converter Tic-Tac-Toe Game Snake Game Memory Game Chat Application Face Detection System Social Networking Site Text Editor Career & Jobs in Java 2025 Java opens doors to a wide range of tech careers across industries—from enterprise software to mobile apps and cloud systems. Here’s a list of top career options for professionals with Java expertise, along with their average salary ranges: Career Average Salary (INR) Per Annum Average Salary (USD) Per Annum Java Developer ₹400,000 – ₹1,200,000 $55,000 – $100,000 Full Stack Java Developer ₹700,000 – ₹1,800,000 $75,000 – $130,000 Backend Engineer (Java) ₹800,000 – ₹2,000,000 $80,000 – $140,000 Android Developer (Java/Kotlin) ₹500,000 – ₹1,500,000 $60,000 – $110,000 Java Architect ₹1,500,000 – ₹3,000,000 $120,000 – $170,000 DevOps Engineer (Java projects) ₹900,000 – ₹2,200,000 $90,000 – $150,000 Big Data Engineer (Java + Hadoop) ₹1,000,000 – ₹2,500,000 $100,000 – $160,000 Automation Test Engineer (Java + Selenium) ₹600,000 – ₹1,400,000 $65,000 – $110,000 Software Engineer (Java Spring Boot) ₹700,000 – ₹1,800,000 $75,000 – $130,000 Java Consultant / Technical Lead ₹1,200,000 – ₹2,800,000 $110,000 – $160,000 List of Companies Using Java These are some popular companies that use Java in thier workflow: Company Description Google Uses Java for Android development, backend services, and internal tools across products like Gmail and Google Drive. Amazon Java is widely used at Amazon for building scalable backend systems, AWS services, and e-commerce infrastructure. Netflix Java powers many of Netflix\'s backend microservices, helping deliver content to millions of users with high availability. Spotify Relies on Java for data processing, backend APIs, and scalable microservices that support music streaming. Airbnb Uses Java in its backend systems to handle listings, payments, and user interactions at scale. Uber Employs Java for real-time dispatch systems, geolocation services, and backend microservices. LinkedIn Java is a core language for building LinkedIn’s backend architecture, handling data-intensive workloads and APIs. eBay Uses Java for high-traffic applications, auction management, and payment services. NASA Implements Java in various projects, including simulations, data analysis tools, and mission-critical software. Intel Uses Java in embedded systems, performance testing tools, and internal applications across chip development Introduction to Java Visit Course Introduction to Java Writing First Program in Java Variables and Primitive DataTypes Non Primitive DataTypes Type Conversion in Java Input in Java Comment More info Campus Training Program Next Article Introduction to Java K kartik Follow 363 Improve Article Tags : Java Tutorials Practice Tags : Java Like 363', 'Java Tutorial Last Updated : 23 Jul, 2025 Comments Improve Suggest changes 363 Likes Like Report Java is a high-level, object-oriented programming language used to build web apps, mobile applications, and enterprise software systems. It is known for its Write Once, Run Anywhere capability, which means code written in Java can run on any device that supports the Java Virtual Machine (JVM). Java syntax and structure is similar to C-based languages like C++ and C#. Its robustness, platform-independent compatibility, and strong memory management have made it a go-to language for developers worldwide. Previous Pause Next 7 / 9 This Java tutorial is designed for both beginners and experienced professionals and it covers basic to advanced Java topics. Do you wish to learn Java in a scheduled manner ? Try our ongoing free course Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Do you wish to learn Advance Java in scheduled manner? Try our ongoing free course Advance Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Why Learn Java? Java is used to build Android apps, desktop and web apps, enterprise backend systems, and cloud-based software. Java is in high demand with many job opportunities in software development. Java has popular frameworks like Spring and Hibernate which makes Java powerful for enterprise applications. Java supports object-oriented programming for clean and reusable code. It runs on all platforms Windows, Mac, and Linux using the JVM. Top companies like Amazon, Netflix, and LinkedIn use Java. Java Hello World Program Here is a simple Java program that prints "Hello World". Java // A Java program to print "Hello World" public class Geeks { public static void main ( String args [] ) { System . out . println ( "Hello World" ); } } // A Java program to print "Hello World" public class Geeks { public static void main ( String args []) { System . out . println ( "Hello World" ); } } Output Hello World Java Basics Java basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals. Mastering these fundamentals is key to building strong, error-free Java applications: Introduction Download and Install Java JDK vs JRE vs JVM Identifiers Keywords Quiz : Java Basics and Identifiers Data Types Variables Operators Quiz : Variables , Operator Decision Making (if, if-else, switch, break, continue, jump) Loops Quiz : Control Statements and Loops Java Methods Java methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier: Introduction to Methods Static Methods vs Instance Methods Access Modifiers Command Line Arguments Variable Arguments (Varargs) Quiz : Methods Java Arrays Java arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions: Introduction to Arrays Declare and Initialize Arrays Multi-Dimensional Arrays Quiz: Java Arrays Jagged Arrays Arrays Class Final Arrays Java Array Programs Quiz: Array Programs Java Strings Java Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed: Introduction of Strings Why Strings are Immutable? Java\xa0String Concatenation Quiz : String Basics String Class StringBuffer Class StringBuilder Class Quiz: String Classes Strings vs StringBuffer vs StringBuilder Java String Programs Java OOPs Concepts Java follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable: What are OOPs Concepts? Classes and Objects Quiz: Classes and Objects Constructors Quiz : Constructors Object Class Abstraction Encapsulation Inheritance Quiz : Inheritance and Abstraction Polymorphism Compile-Time Polymorphism (Method Overloading) Runtime Polymorphism (Method Overriding) Packages Quiz : Polymorphism and Packages Java Interfaces Java interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach: Java Interfaces Interfaces and Inheritance Class vs Interface Quiz: Interfaces Functional Interface Nested Interface Marker Interface Comparator Interface Quiz : Interface types and Comparator Java Collections Java Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap: Java Collection Framework Collections Class Collection Interface Quiz: Collection List Interface ArrayList LinkedList Quiz : List , ArrayList , LinkedList Set Interface HashSet TreeSet Quiz : Set and HashSet Queue Interface Priority Queue Deque Interface Map Interface HashMap Quiz: Queue and Map Interface Iterator Comparator Interface Comparable Interface Quiz : Iterators , Comparator vs Comparable Java Exception Handling ava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions: Java Exceptions Checked vs Unchecked Exceptions Try Catch Block Quiz: Java Exceptions Final, Finally and Finalize Throw and Throws Customized Exception Handling Chained Exceptions Null Pointer Exceptions Exception Handling with Method Overriding Quiz : Exception Handling Java Multithreading Java Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks like parallel processing and responsive applications: Introduction to Java Multithreading Threads Thread Class Runnable Interface Quiz: Thread Basics and Lifecycle Lifecycle and States of a Thread Main Thread Thread Priority in Multithreading Naming & Feteching Name of Current Thread Thread.start() vs Thread.run() Method Thread.sleep() Method Daemon Thread Quiz : Thread Methods and Daemon Threads Thread Safety Thread Pools Java File Handling Java File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from the java.io and java.nio packages for efficient file operations: File Handling File Class Create Files Read Files Quiz: File Handling Write on Files Delete File FileReader Class FileWriter Class Quiz: File Writing FilePermission Class FileDescriptor Class Java Streams and Lambda Expressions Java Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data: Lambda Expressions Method References Java Stream - Complete Tutorial Quiz: Lambda Expressions and Streams Java 8 Features - Complete Tutorial Java IO Java IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of the java.io package and supports both byte and character streams: Introduction to Java IO Reader Class Writer Class FileInput Stream Quiz : IO Basics FileOutput Stream BufferedReader Input Stream BufferedReader Output stream BufferedReader vs Scanner Fast I/O Quiz : BufferedReader vs Scanner and Fast I/O Java Synchronization Java Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency: Java Synchronization Importance of Thread Synchronization Method and Block Synchronization Quiz : Synchronization Basics Atomic vs Volatile vs Synchronized Local Frameworks vs Thread Synchronization Deadlock in Multithreading Quiz : Deadlocks and Synchronization Deadlock Prevention and Avoidance Lock vs Monitor in Concurrency Reentrant Lock Quiz : Concurrency Locks and Reentrant Locks Java Regex Java Regex (Regular Expressions) allows pattern matching and text manipulation using the java.util.regex package. It is powerful for validating, searching, and replacing strings based on specific patterns: What is Java Regex? Pattern Class Matcher Class Character Class Quiz : Regex Basics and Pattern Matching Quantifiers Java Networking Java Networking enables communication between devices over a network using classes from the java.net package. It supports protocols like TCP and UDP for building client-server applications and data exchange: Introduction to Java Networking TCP Architecture UDP Architecture IPV4 vs IPV6 Quiz : Networking Basics and Protocols Connection-Oriented vs Connectionless Protocols Socket Programming Server Socket Class Quiz: Sockets and Server Communication URL Class and Methods Java Database Connectivity(JDBC) Introduction to Java JDBC JDBC Driver JDBC Connection Types of Statements in JDBC Quiz : JDBC Java Memory Allocation Java Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically: Java Memory Management How Java Objects Stored in Memory? Quiz : Java Memory Allocation Stack vs Heap Memory Allocation Quiz : Heap vs Stack Java Virtual Machine(JVM) Stack Area Types of Memory Areas Allocated by JVM Garbage Collection Quiz: JVM Memory Management and Garbage Collection Types of JVM Garbage Collectors Heap and Stack Memory Allocation Memory Leaks Java Interview Questions Prepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate: 200+ Core Java Interview Questions and Answers Java MCQ Best Approach to Learn Java Here’s the step-by-step approach to learn and master Java efficiently and effectively: 1. Understand Java Fundamentals: Start with the basics: what Java is, how it works (JVM, JRE, JDK), and why it’s platform-independent. Learn about Java’s role in building desktop, web, and mobile applications. 2. Set Up the Java Environment: Install the latest JDK and configure your development environment. Use a beginner-friendly IDE like IntelliJ IDEA, Eclipse, or VS Code for writing and testing your code. 3. Learn Core Java Concepts: Focus on essential topics like variables, data types, operators, control structures (if-else, switch, loops), and input/output. Practice writing simple programs to strengthen your understanding. 4. Master Object-Oriented Programming (OOP): Dive into the pillars of OOP—classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Understand how Java handles these concepts and how to apply them effectively in real projects. 5. Explore Collections and Data Structures: Learn about Java\'s Collection Framework—ArrayList, HashMap, Set, LinkedList, and more. Understand how to use them and when to choose one over the other. 6. Work with Exception Handling: Understand the importance of error handling in Java using try-catch blocks, finally, throw, and custom exceptions. Learn best practices for writing clean, safe code. 7. Get Comfortable with File I/O: Learn how Java reads from and writes to files using File , FileReader , BufferedReader , FileWriter , and Streams . Practice creating programs that manage and manipulate file data. 8. Understand Multithreading and Concurrency: Grasp the basics of threads, synchronization, and concurrent programming. Learn how Java handles multiple tasks simultaneously using the Thread class and ExecutorService . 9. Learn Java Libraries and APIs: Familiarize yourself with essential APIs like Java Math, Date & Time (java.time), and String manipulation. Explore popular libraries like Apache Commons, Gson, or Jackson for real-world development. 10. Build Real-World Projects: Apply your knowledge by building console apps, file management systems, or basic desktop GUIs using JavaFX or Swing. Gradually move into web development with Java Servlets, JSP, or Spring Boot. Java Program Examples Java Programming Examples Java Exercises – Basic to Advanced Java Practice Programs Java Coding Practice Problems Java Fundamentals Coding Practice Problems Java Methods Coding Practice Problems Java Arrays Coding Practice Problems Java Strings Coding Practice Problems Java OOPs Coding Practice Problems Java Sorting and Searching Algorithms Coding Practice Problems Java Collections Coding Practice Problems Java Stream & Lambda Expression Coding Practice Problems Java Quizzes and MCQs Java Language MCQs with Answers Important Java Projects Number Guessing Game Simple Banking Application Currency Converter Tic-Tac-Toe Game Snake Game Memory Game Chat Application Face Detection System Social Networking Site Text Editor Career & Jobs in Java 2025 Java opens doors to a wide range of tech careers across industries—from enterprise software to mobile apps and cloud systems. Here’s a list of top career options for professionals with Java expertise, along with their average salary ranges: Career Average Salary (INR) Per Annum Average Salary (USD) Per Annum Java Developer ₹400,000 – ₹1,200,000 $55,000 – $100,000 Full Stack Java Developer ₹700,000 – ₹1,800,000 $75,000 – $130,000 Backend Engineer (Java) ₹800,000 – ₹2,000,000 $80,000 – $140,000 Android Developer (Java/Kotlin) ₹500,000 – ₹1,500,000 $60,000 – $110,000 Java Architect ₹1,500,000 – ₹3,000,000 $120,000 – $170,000 DevOps Engineer (Java projects) ₹900,000 – ₹2,200,000 $90,000 – $150,000 Big Data Engineer (Java + Hadoop) ₹1,000,000 – ₹2,500,000 $100,000 – $160,000 Automation Test Engineer (Java + Selenium) ₹600,000 – ₹1,400,000 $65,000 – $110,000 Software Engineer (Java Spring Boot) ₹700,000 – ₹1,800,000 $75,000 – $130,000 Java Consultant / Technical Lead ₹1,200,000 – ₹2,800,000 $110,000 – $160,000 List of Companies Using Java These are some popular companies that use Java in thier workflow: Company Description Google Uses Java for Android development, backend services, and internal tools across products like Gmail and Google Drive. Amazon Java is widely used at Amazon for building scalable backend systems, AWS services, and e-commerce infrastructure. Netflix Java powers many of Netflix\'s backend microservices, helping deliver content to millions of users with high availability. Spotify Relies on Java for data processing, backend APIs, and scalable microservices that support music streaming. Airbnb Uses Java in its backend systems to handle listings, payments, and user interactions at scale. Uber Employs Java for real-time dispatch systems, geolocation services, and backend microservices. LinkedIn Java is a core language for building LinkedIn’s backend architecture, handling data-intensive workloads and APIs. eBay Uses Java for high-traffic applications, auction management, and payment services. NASA Implements Java in various projects, including simulations, data analysis tools, and mission-critical software. Intel Uses Java in embedded systems, performance testing tools, and internal applications across chip development Introduction to Java Visit Course Introduction to Java Writing First Program in Java Variables and Primitive DataTypes Non Primitive DataTypes Type Conversion in Java Input in Java Comment More info Campus Training Program Next Article Introduction to Java K kartik Follow 363 Improve Article Tags : Java Tutorials Practice Tags : Java', '2k+ interested Geeks Complete Python Program - Mastering from Fundamentals to Advanced Concepts Explore', '2k+ interested Geeks Complete Python Program - Mastering from Fundamentals to Advanced Concepts Explore', 'Suggest Changes Help us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal. Create Improvement Enhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.', 'Suggest Changes Help us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.', 'Create Improvement Enhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.', 'Log in New user ? Register Now Continue with Google or Username or Email Password Remember me Forgot Password Sign In By creating this account, you agree to our Privacy Policy & Cookie Policy. Create Account Already have an account ? Log in Continue with Google or Username or Email Password Institution / Organization Sign Up *Please enter your email address or userHandle. Back to Login Reset Password', 'Explore GfG Courses Share Your Experiences Java Tutorial Basics Introduction to Java Java Programming Basics Java Methods Access Modifiers in Java Arrays in Java Java Strings Regular Expressions in Java OOPs & Interfaces Classes and Objects in Java Java Constructors Java OOP(Object Oriented Programming) Concepts Java Packages Java Interface Collections Collections in Java Collections Class in Java Collection Interface in Java Java Iterator Java Comparator Interface Exception Handling Java Exception Handling Java Try Catch Block Java final, finally and finalize Chained Exceptions in Java Null Pointer Exception in Java Exception Handling with Method Overriding in Java Java Advanced Java Multithreading Tutorial Synchronization in Java File Handling in Java Java Method References Java 8 Stream Tutorial Java Networking JDBC Tutorial Java Memory Management Garbage Collection in Java Memory Leaks in Java Practice Java Java Interview Questions and Answers Java Programs - Java Programming Examples Java Exercises - Basic to Advanced Java Practice Programs with Solutions Java Quiz | Level Up Your Java Skills Top 50 Java Project Ideas For Beginners and Advanced [Update 2025] Java Backend Development Course Java Tutorial Last Updated : 23 Jul, 2025 Comments Improve Suggest changes 363 Likes Like Report Java is a high-level, object-oriented programming language used to build web apps, mobile applications, and enterprise software systems. It is known for its Write Once, Run Anywhere capability, which means code written in Java can run on any device that supports the Java Virtual Machine (JVM). Java syntax and structure is similar to C-based languages like C++ and C#. Its robustness, platform-independent compatibility, and strong memory management have made it a go-to language for developers worldwide. Previous Pause Next 7 / 9 This Java tutorial is designed for both beginners and experienced professionals and it covers basic to advanced Java topics. Do you wish to learn Java in a scheduled manner ? Try our ongoing free course Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Do you wish to learn Advance Java in scheduled manner? Try our ongoing free course Advance Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Why Learn Java? Java is used to build Android apps, desktop and web apps, enterprise backend systems, and cloud-based software. Java is in high demand with many job opportunities in software development. Java has popular frameworks like Spring and Hibernate which makes Java powerful for enterprise applications. Java supports object-oriented programming for clean and reusable code. It runs on all platforms Windows, Mac, and Linux using the JVM. Top companies like Amazon, Netflix, and LinkedIn use Java. Java Hello World Program Here is a simple Java program that prints "Hello World". Java // A Java program to print "Hello World" public class Geeks { public static void main ( String args [] ) { System . out . println ( "Hello World" ); } } // A Java program to print "Hello World" public class Geeks { public static void main ( String args []) { System . out . println ( "Hello World" ); } } Output Hello World Java Basics Java basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals. Mastering these fundamentals is key to building strong, error-free Java applications: Introduction Download and Install Java JDK vs JRE vs JVM Identifiers Keywords Quiz : Java Basics and Identifiers Data Types Variables Operators Quiz : Variables , Operator Decision Making (if, if-else, switch, break, continue, jump) Loops Quiz : Control Statements and Loops Java Methods Java methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier: Introduction to Methods Static Methods vs Instance Methods Access Modifiers Command Line Arguments Variable Arguments (Varargs) Quiz : Methods Java Arrays Java arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions: Introduction to Arrays Declare and Initialize Arrays Multi-Dimensional Arrays Quiz: Java Arrays Jagged Arrays Arrays Class Final Arrays Java Array Programs Quiz: Array Programs Java Strings Java Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed: Introduction of Strings Why Strings are Immutable? Java\xa0String Concatenation Quiz : String Basics String Class StringBuffer Class StringBuilder Class Quiz: String Classes Strings vs StringBuffer vs StringBuilder Java String Programs Java OOPs Concepts Java follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable: What are OOPs Concepts? Classes and Objects Quiz: Classes and Objects Constructors Quiz : Constructors Object Class Abstraction Encapsulation Inheritance Quiz : Inheritance and Abstraction Polymorphism Compile-Time Polymorphism (Method Overloading) Runtime Polymorphism (Method Overriding) Packages Quiz : Polymorphism and Packages Java Interfaces Java interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach: Java Interfaces Interfaces and Inheritance Class vs Interface Quiz: Interfaces Functional Interface Nested Interface Marker Interface Comparator Interface Quiz : Interface types and Comparator Java Collections Java Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap: Java Collection Framework Collections Class Collection Interface Quiz: Collection List Interface ArrayList LinkedList Quiz : List , ArrayList , LinkedList Set Interface HashSet TreeSet Quiz : Set and HashSet Queue Interface Priority Queue Deque Interface Map Interface HashMap Quiz: Queue and Map Interface Iterator Comparator Interface Comparable Interface Quiz : Iterators , Comparator vs Comparable Java Exception Handling ava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions: Java Exceptions Checked vs Unchecked Exceptions Try Catch Block Quiz: Java Exceptions Final, Finally and Finalize Throw and Throws Customized Exception Handling Chained Exceptions Null Pointer Exceptions Exception Handling with Method Overriding Quiz : Exception Handling Java Multithreading Java Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks like parallel processing and responsive applications: Introduction to Java Multithreading Threads Thread Class Runnable Interface Quiz: Thread Basics and Lifecycle Lifecycle and States of a Thread Main Thread Thread Priority in Multithreading Naming & Feteching Name of Current Thread Thread.start() vs Thread.run() Method Thread.sleep() Method Daemon Thread Quiz : Thread Methods and Daemon Threads Thread Safety Thread Pools Java File Handling Java File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from the java.io and java.nio packages for efficient file operations: File Handling File Class Create Files Read Files Quiz: File Handling Write on Files Delete File FileReader Class FileWriter Class Quiz: File Writing FilePermission Class FileDescriptor Class Java Streams and Lambda Expressions Java Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data: Lambda Expressions Method References Java Stream - Complete Tutorial Quiz: Lambda Expressions and Streams Java 8 Features - Complete Tutorial Java IO Java IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of the java.io package and supports both byte and character streams: Introduction to Java IO Reader Class Writer Class FileInput Stream Quiz : IO Basics FileOutput Stream BufferedReader Input Stream BufferedReader Output stream BufferedReader vs Scanner Fast I/O Quiz : BufferedReader vs Scanner and Fast I/O Java Synchronization Java Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency: Java Synchronization Importance of Thread Synchronization Method and Block Synchronization Quiz : Synchronization Basics Atomic vs Volatile vs Synchronized Local Frameworks vs Thread Synchronization Deadlock in Multithreading Quiz : Deadlocks and Synchronization Deadlock Prevention and Avoidance Lock vs Monitor in Concurrency Reentrant Lock Quiz : Concurrency Locks and Reentrant Locks Java Regex Java Regex (Regular Expressions) allows pattern matching and text manipulation using the java.util.regex package. It is powerful for validating, searching, and replacing strings based on specific patterns: What is Java Regex? Pattern Class Matcher Class Character Class Quiz : Regex Basics and Pattern Matching Quantifiers Java Networking Java Networking enables communication between devices over a network using classes from the java.net package. It supports protocols like TCP and UDP for building client-server applications and data exchange: Introduction to Java Networking TCP Architecture UDP Architecture IPV4 vs IPV6 Quiz : Networking Basics and Protocols Connection-Oriented vs Connectionless Protocols Socket Programming Server Socket Class Quiz: Sockets and Server Communication URL Class and Methods Java Database Connectivity(JDBC) Introduction to Java JDBC JDBC Driver JDBC Connection Types of Statements in JDBC Quiz : JDBC Java Memory Allocation Java Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically: Java Memory Management How Java Objects Stored in Memory? Quiz : Java Memory Allocation Stack vs Heap Memory Allocation Quiz : Heap vs Stack Java Virtual Machine(JVM) Stack Area Types of Memory Areas Allocated by JVM Garbage Collection Quiz: JVM Memory Management and Garbage Collection Types of JVM Garbage Collectors Heap and Stack Memory Allocation Memory Leaks Java Interview Questions Prepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate: 200+ Core Java Interview Questions and Answers Java MCQ Best Approach to Learn Java Here’s the step-by-step approach to learn and master Java efficiently and effectively: 1. Understand Java Fundamentals: Start with the basics: what Java is, how it works (JVM, JRE, JDK), and why it’s platform-independent. Learn about Java’s role in building desktop, web, and mobile applications. 2. Set Up the Java Environment: Install the latest JDK and configure your development environment. Use a beginner-friendly IDE like IntelliJ IDEA, Eclipse, or VS Code for writing and testing your code. 3. Learn Core Java Concepts: Focus on essential topics like variables, data types, operators, control structures (if-else, switch, loops), and input/output. Practice writing simple programs to strengthen your understanding. 4. Master Object-Oriented Programming (OOP): Dive into the pillars of OOP—classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Understand how Java handles these concepts and how to apply them effectively in real projects. 5. Explore Collections and Data Structures: Learn about Java\'s Collection Framework—ArrayList, HashMap, Set, LinkedList, and more. Understand how to use them and when to choose one over the other. 6. Work with Exception Handling: Understand the importance of error handling in Java using try-catch blocks, finally, throw, and custom exceptions. Learn best practices for writing clean, safe code. 7. Get Comfortable with File I/O: Learn how Java reads from and writes to files using File , FileReader , BufferedReader , FileWriter , and Streams . Practice creating programs that manage and manipulate file data. 8. Understand Multithreading and Concurrency: Grasp the basics of threads, synchronization, and concurrent programming. Learn how Java handles multiple tasks simultaneously using the Thread class and ExecutorService . 9. Learn Java Libraries and APIs: Familiarize yourself with essential APIs like Java Math, Date & Time (java.time), and String manipulation. Explore popular libraries like Apache Commons, Gson, or Jackson for real-world development. 10. Build Real-World Projects: Apply your knowledge by building console apps, file management systems, or basic desktop GUIs using JavaFX or Swing. Gradually move into web development with Java Servlets, JSP, or Spring Boot. Java Program Examples Java Programming Examples Java Exercises – Basic to Advanced Java Practice Programs Java Coding Practice Problems Java Fundamentals Coding Practice Problems Java Methods Coding Practice Problems Java Arrays Coding Practice Problems Java Strings Coding Practice Problems Java OOPs Coding Practice Problems Java Sorting and Searching Algorithms Coding Practice Problems Java Collections Coding Practice Problems Java Stream & Lambda Expression Coding Practice Problems Java Quizzes and MCQs Java Language MCQs with Answers Important Java Projects Number Guessing Game Simple Banking Application Currency Converter Tic-Tac-Toe Game Snake Game Memory Game Chat Application Face Detection System Social Networking Site Text Editor Career & Jobs in Java 2025 Java opens doors to a wide range of tech careers across industries—from enterprise software to mobile apps and cloud systems. Here’s a list of top career options for professionals with Java expertise, along with their average salary ranges: Career Average Salary (INR) Per Annum Average Salary (USD) Per Annum Java Developer ₹400,000 – ₹1,200,000 $55,000 – $100,000 Full Stack Java Developer ₹700,000 – ₹1,800,000 $75,000 – $130,000 Backend Engineer (Java) ₹800,000 – ₹2,000,000 $80,000 – $140,000 Android Developer (Java/Kotlin) ₹500,000 – ₹1,500,000 $60,000 – $110,000 Java Architect ₹1,500,000 – ₹3,000,000 $120,000 – $170,000 DevOps Engineer (Java projects) ₹900,000 – ₹2,200,000 $90,000 – $150,000 Big Data Engineer (Java + Hadoop) ₹1,000,000 – ₹2,500,000 $100,000 – $160,000 Automation Test Engineer (Java + Selenium) ₹600,000 – ₹1,400,000 $65,000 – $110,000 Software Engineer (Java Spring Boot) ₹700,000 – ₹1,800,000 $75,000 – $130,000 Java Consultant / Technical Lead ₹1,200,000 – ₹2,800,000 $110,000 – $160,000 List of Companies Using Java These are some popular companies that use Java in thier workflow: Company Description Google Uses Java for Android development, backend services, and internal tools across products like Gmail and Google Drive. Amazon Java is widely used at Amazon for building scalable backend systems, AWS services, and e-commerce infrastructure. Netflix Java powers many of Netflix\'s backend microservices, helping deliver content to millions of users with high availability. Spotify Relies on Java for data processing, backend APIs, and scalable microservices that support music streaming. Airbnb Uses Java in its backend systems to handle listings, payments, and user interactions at scale. Uber Employs Java for real-time dispatch systems, geolocation services, and backend microservices. LinkedIn Java is a core language for building LinkedIn’s backend architecture, handling data-intensive workloads and APIs. eBay Uses Java for high-traffic applications, auction management, and payment services. NASA Implements Java in various projects, including simulations, data analysis tools, and mission-critical software. Intel Uses Java in embedded systems, performance testing tools, and internal applications across chip development Introduction to Java Visit Course Introduction to Java Writing First Program in Java Variables and Primitive DataTypes Non Primitive DataTypes Type Conversion in Java Input in Java Comment More info Campus Training Program Next Article Introduction to Java K kartik Follow 363 Improve Article Tags : Java Tutorials Practice Tags : Java Like 363 491k+ interested Geeks Complete Machine Learning & Data Science Program Explore 265k+ interested Geeks Master Competitive Programming - Complete Beginner to Advanced Explore 2k+ interested Geeks Complete Python Program - Mastering from Fundamentals to Advanced Concepts Explore', 'Java Tutorial Last Updated : 23 Jul, 2025 Comments Improve Suggest changes 363 Likes Like Report Java is a high-level, object-oriented programming language used to build web apps, mobile applications, and enterprise software systems. It is known for its Write Once, Run Anywhere capability, which means code written in Java can run on any device that supports the Java Virtual Machine (JVM). Java syntax and structure is similar to C-based languages like C++ and C#. Its robustness, platform-independent compatibility, and strong memory management have made it a go-to language for developers worldwide. Previous Pause Next 7 / 9 This Java tutorial is designed for both beginners and experienced professionals and it covers basic to advanced Java topics. Do you wish to learn Java in a scheduled manner ? Try our ongoing free course Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Do you wish to learn Advance Java in scheduled manner? Try our ongoing free course Advance Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Why Learn Java? Java is used to build Android apps, desktop and web apps, enterprise backend systems, and cloud-based software. Java is in high demand with many job opportunities in software development. Java has popular frameworks like Spring and Hibernate which makes Java powerful for enterprise applications. Java supports object-oriented programming for clean and reusable code. It runs on all platforms Windows, Mac, and Linux using the JVM. Top companies like Amazon, Netflix, and LinkedIn use Java. Java Hello World Program Here is a simple Java program that prints "Hello World". Java // A Java program to print "Hello World" public class Geeks { public static void main ( String args [] ) { System . out . println ( "Hello World" ); } } // A Java program to print "Hello World" public class Geeks { public static void main ( String args []) { System . out . println ( "Hello World" ); } } Output Hello World Java Basics Java basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals. Mastering these fundamentals is key to building strong, error-free Java applications: Introduction Download and Install Java JDK vs JRE vs JVM Identifiers Keywords Quiz : Java Basics and Identifiers Data Types Variables Operators Quiz : Variables , Operator Decision Making (if, if-else, switch, break, continue, jump) Loops Quiz : Control Statements and Loops Java Methods Java methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier: Introduction to Methods Static Methods vs Instance Methods Access Modifiers Command Line Arguments Variable Arguments (Varargs) Quiz : Methods Java Arrays Java arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions: Introduction to Arrays Declare and Initialize Arrays Multi-Dimensional Arrays Quiz: Java Arrays Jagged Arrays Arrays Class Final Arrays Java Array Programs Quiz: Array Programs Java Strings Java Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed: Introduction of Strings Why Strings are Immutable? Java\xa0String Concatenation Quiz : String Basics String Class StringBuffer Class StringBuilder Class Quiz: String Classes Strings vs StringBuffer vs StringBuilder Java String Programs Java OOPs Concepts Java follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable: What are OOPs Concepts? Classes and Objects Quiz: Classes and Objects Constructors Quiz : Constructors Object Class Abstraction Encapsulation Inheritance Quiz : Inheritance and Abstraction Polymorphism Compile-Time Polymorphism (Method Overloading) Runtime Polymorphism (Method Overriding) Packages Quiz : Polymorphism and Packages Java Interfaces Java interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach: Java Interfaces Interfaces and Inheritance Class vs Interface Quiz: Interfaces Functional Interface Nested Interface Marker Interface Comparator Interface Quiz : Interface types and Comparator Java Collections Java Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap: Java Collection Framework Collections Class Collection Interface Quiz: Collection List Interface ArrayList LinkedList Quiz : List , ArrayList , LinkedList Set Interface HashSet TreeSet Quiz : Set and HashSet Queue Interface Priority Queue Deque Interface Map Interface HashMap Quiz: Queue and Map Interface Iterator Comparator Interface Comparable Interface Quiz : Iterators , Comparator vs Comparable Java Exception Handling ava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions: Java Exceptions Checked vs Unchecked Exceptions Try Catch Block Quiz: Java Exceptions Final, Finally and Finalize Throw and Throws Customized Exception Handling Chained Exceptions Null Pointer Exceptions Exception Handling with Method Overriding Quiz : Exception Handling Java Multithreading Java Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks like parallel processing and responsive applications: Introduction to Java Multithreading Threads Thread Class Runnable Interface Quiz: Thread Basics and Lifecycle Lifecycle and States of a Thread Main Thread Thread Priority in Multithreading Naming & Feteching Name of Current Thread Thread.start() vs Thread.run() Method Thread.sleep() Method Daemon Thread Quiz : Thread Methods and Daemon Threads Thread Safety Thread Pools Java File Handling Java File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from the java.io and java.nio packages for efficient file operations: File Handling File Class Create Files Read Files Quiz: File Handling Write on Files Delete File FileReader Class FileWriter Class Quiz: File Writing FilePermission Class FileDescriptor Class Java Streams and Lambda Expressions Java Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data: Lambda Expressions Method References Java Stream - Complete Tutorial Quiz: Lambda Expressions and Streams Java 8 Features - Complete Tutorial Java IO Java IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of the java.io package and supports both byte and character streams: Introduction to Java IO Reader Class Writer Class FileInput Stream Quiz : IO Basics FileOutput Stream BufferedReader Input Stream BufferedReader Output stream BufferedReader vs Scanner Fast I/O Quiz : BufferedReader vs Scanner and Fast I/O Java Synchronization Java Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency: Java Synchronization Importance of Thread Synchronization Method and Block Synchronization Quiz : Synchronization Basics Atomic vs Volatile vs Synchronized Local Frameworks vs Thread Synchronization Deadlock in Multithreading Quiz : Deadlocks and Synchronization Deadlock Prevention and Avoidance Lock vs Monitor in Concurrency Reentrant Lock Quiz : Concurrency Locks and Reentrant Locks Java Regex Java Regex (Regular Expressions) allows pattern matching and text manipulation using the java.util.regex package. It is powerful for validating, searching, and replacing strings based on specific patterns: What is Java Regex? Pattern Class Matcher Class Character Class Quiz : Regex Basics and Pattern Matching Quantifiers Java Networking Java Networking enables communication between devices over a network using classes from the java.net package. It supports protocols like TCP and UDP for building client-server applications and data exchange: Introduction to Java Networking TCP Architecture UDP Architecture IPV4 vs IPV6 Quiz : Networking Basics and Protocols Connection-Oriented vs Connectionless Protocols Socket Programming Server Socket Class Quiz: Sockets and Server Communication URL Class and Methods Java Database Connectivity(JDBC) Introduction to Java JDBC JDBC Driver JDBC Connection Types of Statements in JDBC Quiz : JDBC Java Memory Allocation Java Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically: Java Memory Management How Java Objects Stored in Memory? Quiz : Java Memory Allocation Stack vs Heap Memory Allocation Quiz : Heap vs Stack Java Virtual Machine(JVM) Stack Area Types of Memory Areas Allocated by JVM Garbage Collection Quiz: JVM Memory Management and Garbage Collection Types of JVM Garbage Collectors Heap and Stack Memory Allocation Memory Leaks Java Interview Questions Prepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate: 200+ Core Java Interview Questions and Answers Java MCQ Best Approach to Learn Java Here’s the step-by-step approach to learn and master Java efficiently and effectively: 1. Understand Java Fundamentals: Start with the basics: what Java is, how it works (JVM, JRE, JDK), and why it’s platform-independent. Learn about Java’s role in building desktop, web, and mobile applications. 2. Set Up the Java Environment: Install the latest JDK and configure your development environment. Use a beginner-friendly IDE like IntelliJ IDEA, Eclipse, or VS Code for writing and testing your code. 3. Learn Core Java Concepts: Focus on essential topics like variables, data types, operators, control structures (if-else, switch, loops), and input/output. Practice writing simple programs to strengthen your understanding. 4. Master Object-Oriented Programming (OOP): Dive into the pillars of OOP—classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Understand how Java handles these concepts and how to apply them effectively in real projects. 5. Explore Collections and Data Structures: Learn about Java\'s Collection Framework—ArrayList, HashMap, Set, LinkedList, and more. Understand how to use them and when to choose one over the other. 6. Work with Exception Handling: Understand the importance of error handling in Java using try-catch blocks, finally, throw, and custom exceptions. Learn best practices for writing clean, safe code. 7. Get Comfortable with File I/O: Learn how Java reads from and writes to files using File , FileReader , BufferedReader , FileWriter , and Streams . Practice creating programs that manage and manipulate file data. 8. Understand Multithreading and Concurrency: Grasp the basics of threads, synchronization, and concurrent programming. Learn how Java handles multiple tasks simultaneously using the Thread class and ExecutorService . 9. Learn Java Libraries and APIs: Familiarize yourself with essential APIs like Java Math, Date & Time (java.time), and String manipulation. Explore popular libraries like Apache Commons, Gson, or Jackson for real-world development. 10. Build Real-World Projects: Apply your knowledge by building console apps, file management systems, or basic desktop GUIs using JavaFX or Swing. Gradually move into web development with Java Servlets, JSP, or Spring Boot. Java Program Examples Java Programming Examples Java Exercises – Basic to Advanced Java Practice Programs Java Coding Practice Problems Java Fundamentals Coding Practice Problems Java Methods Coding Practice Problems Java Arrays Coding Practice Problems Java Strings Coding Practice Problems Java OOPs Coding Practice Problems Java Sorting and Searching Algorithms Coding Practice Problems Java Collections Coding Practice Problems Java Stream & Lambda Expression Coding Practice Problems Java Quizzes and MCQs Java Language MCQs with Answers Important Java Projects Number Guessing Game Simple Banking Application Currency Converter Tic-Tac-Toe Game Snake Game Memory Game Chat Application Face Detection System Social Networking Site Text Editor Career & Jobs in Java 2025 Java opens doors to a wide range of tech careers across industries—from enterprise software to mobile apps and cloud systems. Here’s a list of top career options for professionals with Java expertise, along with their average salary ranges: Career Average Salary (INR) Per Annum Average Salary (USD) Per Annum Java Developer ₹400,000 – ₹1,200,000 $55,000 – $100,000 Full Stack Java Developer ₹700,000 – ₹1,800,000 $75,000 – $130,000 Backend Engineer (Java) ₹800,000 – ₹2,000,000 $80,000 – $140,000 Android Developer (Java/Kotlin) ₹500,000 – ₹1,500,000 $60,000 – $110,000 Java Architect ₹1,500,000 – ₹3,000,000 $120,000 – $170,000 DevOps Engineer (Java projects) ₹900,000 – ₹2,200,000 $90,000 – $150,000 Big Data Engineer (Java + Hadoop) ₹1,000,000 – ₹2,500,000 $100,000 – $160,000 Automation Test Engineer (Java + Selenium) ₹600,000 – ₹1,400,000 $65,000 – $110,000 Software Engineer (Java Spring Boot) ₹700,000 – ₹1,800,000 $75,000 – $130,000 Java Consultant / Technical Lead ₹1,200,000 – ₹2,800,000 $110,000 – $160,000 List of Companies Using Java These are some popular companies that use Java in thier workflow: Company Description Google Uses Java for Android development, backend services, and internal tools across products like Gmail and Google Drive. Amazon Java is widely used at Amazon for building scalable backend systems, AWS services, and e-commerce infrastructure. Netflix Java powers many of Netflix\'s backend microservices, helping deliver content to millions of users with high availability. Spotify Relies on Java for data processing, backend APIs, and scalable microservices that support music streaming. Airbnb Uses Java in its backend systems to handle listings, payments, and user interactions at scale. Uber Employs Java for real-time dispatch systems, geolocation services, and backend microservices. LinkedIn Java is a core language for building LinkedIn’s backend architecture, handling data-intensive workloads and APIs. eBay Uses Java for high-traffic applications, auction management, and payment services. NASA Implements Java in various projects, including simulations, data analysis tools, and mission-critical software. Intel Uses Java in embedded systems, performance testing tools, and internal applications across chip development Introduction to Java Visit Course Introduction to Java Writing First Program in Java Variables and Primitive DataTypes Non Primitive DataTypes Type Conversion in Java Input in Java Comment More info Campus Training Program Next Article Introduction to Java K kartik Follow 363 Improve Article Tags : Java Tutorials Practice Tags : Java Like 363', 'Java Tutorial Last Updated : 23 Jul, 2025 Comments Improve Suggest changes 363 Likes Like Report Java is a high-level, object-oriented programming language used to build web apps, mobile applications, and enterprise software systems. It is known for its Write Once, Run Anywhere capability, which means code written in Java can run on any device that supports the Java Virtual Machine (JVM). Java syntax and structure is similar to C-based languages like C++ and C#. Its robustness, platform-independent compatibility, and strong memory management have made it a go-to language for developers worldwide. Previous Pause Next 7 / 9 This Java tutorial is designed for both beginners and experienced professionals and it covers basic to advanced Java topics. Do you wish to learn Java in a scheduled manner ? Try our ongoing free course Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Do you wish to learn Advance Java in scheduled manner? Try our ongoing free course Advance Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Why Learn Java? Java is used to build Android apps, desktop and web apps, enterprise backend systems, and cloud-based software. Java is in high demand with many job opportunities in software development. Java has popular frameworks like Spring and Hibernate which makes Java powerful for enterprise applications. Java supports object-oriented programming for clean and reusable code. It runs on all platforms Windows, Mac, and Linux using the JVM. Top companies like Amazon, Netflix, and LinkedIn use Java. Java Hello World Program Here is a simple Java program that prints "Hello World". Java // A Java program to print "Hello World" public class Geeks { public static void main ( String args [] ) { System . out . println ( "Hello World" ); } } // A Java program to print "Hello World" public class Geeks { public static void main ( String args []) { System . out . println ( "Hello World" ); } } Output Hello World Java Basics Java basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals. Mastering these fundamentals is key to building strong, error-free Java applications: Introduction Download and Install Java JDK vs JRE vs JVM Identifiers Keywords Quiz : Java Basics and Identifiers Data Types Variables Operators Quiz : Variables , Operator Decision Making (if, if-else, switch, break, continue, jump) Loops Quiz : Control Statements and Loops Java Methods Java methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier: Introduction to Methods Static Methods vs Instance Methods Access Modifiers Command Line Arguments Variable Arguments (Varargs) Quiz : Methods Java Arrays Java arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions: Introduction to Arrays Declare and Initialize Arrays Multi-Dimensional Arrays Quiz: Java Arrays Jagged Arrays Arrays Class Final Arrays Java Array Programs Quiz: Array Programs Java Strings Java Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed: Introduction of Strings Why Strings are Immutable? Java\xa0String Concatenation Quiz : String Basics String Class StringBuffer Class StringBuilder Class Quiz: String Classes Strings vs StringBuffer vs StringBuilder Java String Programs Java OOPs Concepts Java follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable: What are OOPs Concepts? Classes and Objects Quiz: Classes and Objects Constructors Quiz : Constructors Object Class Abstraction Encapsulation Inheritance Quiz : Inheritance and Abstraction Polymorphism Compile-Time Polymorphism (Method Overloading) Runtime Polymorphism (Method Overriding) Packages Quiz : Polymorphism and Packages Java Interfaces Java interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach: Java Interfaces Interfaces and Inheritance Class vs Interface Quiz: Interfaces Functional Interface Nested Interface Marker Interface Comparator Interface Quiz : Interface types and Comparator Java Collections Java Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap: Java Collection Framework Collections Class Collection Interface Quiz: Collection List Interface ArrayList LinkedList Quiz : List , ArrayList , LinkedList Set Interface HashSet TreeSet Quiz : Set and HashSet Queue Interface Priority Queue Deque Interface Map Interface HashMap Quiz: Queue and Map Interface Iterator Comparator Interface Comparable Interface Quiz : Iterators , Comparator vs Comparable Java Exception Handling ava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions: Java Exceptions Checked vs Unchecked Exceptions Try Catch Block Quiz: Java Exceptions Final, Finally and Finalize Throw and Throws Customized Exception Handling Chained Exceptions Null Pointer Exceptions Exception Handling with Method Overriding Quiz : Exception Handling Java Multithreading Java Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks like parallel processing and responsive applications: Introduction to Java Multithreading Threads Thread Class Runnable Interface Quiz: Thread Basics and Lifecycle Lifecycle and States of a Thread Main Thread Thread Priority in Multithreading Naming & Feteching Name of Current Thread Thread.start() vs Thread.run() Method Thread.sleep() Method Daemon Thread Quiz : Thread Methods and Daemon Threads Thread Safety Thread Pools Java File Handling Java File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from the java.io and java.nio packages for efficient file operations: File Handling File Class Create Files Read Files Quiz: File Handling Write on Files Delete File FileReader Class FileWriter Class Quiz: File Writing FilePermission Class FileDescriptor Class Java Streams and Lambda Expressions Java Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data: Lambda Expressions Method References Java Stream - Complete Tutorial Quiz: Lambda Expressions and Streams Java 8 Features - Complete Tutorial Java IO Java IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of the java.io package and supports both byte and character streams: Introduction to Java IO Reader Class Writer Class FileInput Stream Quiz : IO Basics FileOutput Stream BufferedReader Input Stream BufferedReader Output stream BufferedReader vs Scanner Fast I/O Quiz : BufferedReader vs Scanner and Fast I/O Java Synchronization Java Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency: Java Synchronization Importance of Thread Synchronization Method and Block Synchronization Quiz : Synchronization Basics Atomic vs Volatile vs Synchronized Local Frameworks vs Thread Synchronization Deadlock in Multithreading Quiz : Deadlocks and Synchronization Deadlock Prevention and Avoidance Lock vs Monitor in Concurrency Reentrant Lock Quiz : Concurrency Locks and Reentrant Locks Java Regex Java Regex (Regular Expressions) allows pattern matching and text manipulation using the java.util.regex package. It is powerful for validating, searching, and replacing strings based on specific patterns: What is Java Regex? Pattern Class Matcher Class Character Class Quiz : Regex Basics and Pattern Matching Quantifiers Java Networking Java Networking enables communication between devices over a network using classes from the java.net package. It supports protocols like TCP and UDP for building client-server applications and data exchange: Introduction to Java Networking TCP Architecture UDP Architecture IPV4 vs IPV6 Quiz : Networking Basics and Protocols Connection-Oriented vs Connectionless Protocols Socket Programming Server Socket Class Quiz: Sockets and Server Communication URL Class and Methods Java Database Connectivity(JDBC) Introduction to Java JDBC JDBC Driver JDBC Connection Types of Statements in JDBC Quiz : JDBC Java Memory Allocation Java Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically: Java Memory Management How Java Objects Stored in Memory? Quiz : Java Memory Allocation Stack vs Heap Memory Allocation Quiz : Heap vs Stack Java Virtual Machine(JVM) Stack Area Types of Memory Areas Allocated by JVM Garbage Collection Quiz: JVM Memory Management and Garbage Collection Types of JVM Garbage Collectors Heap and Stack Memory Allocation Memory Leaks Java Interview Questions Prepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate: 200+ Core Java Interview Questions and Answers Java MCQ Best Approach to Learn Java Here’s the step-by-step approach to learn and master Java efficiently and effectively: 1. Understand Java Fundamentals: Start with the basics: what Java is, how it works (JVM, JRE, JDK), and why it’s platform-independent. Learn about Java’s role in building desktop, web, and mobile applications. 2. Set Up the Java Environment: Install the latest JDK and configure your development environment. Use a beginner-friendly IDE like IntelliJ IDEA, Eclipse, or VS Code for writing and testing your code. 3. Learn Core Java Concepts: Focus on essential topics like variables, data types, operators, control structures (if-else, switch, loops), and input/output. Practice writing simple programs to strengthen your understanding. 4. Master Object-Oriented Programming (OOP): Dive into the pillars of OOP—classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Understand how Java handles these concepts and how to apply them effectively in real projects. 5. Explore Collections and Data Structures: Learn about Java\'s Collection Framework—ArrayList, HashMap, Set, LinkedList, and more. Understand how to use them and when to choose one over the other. 6. Work with Exception Handling: Understand the importance of error handling in Java using try-catch blocks, finally, throw, and custom exceptions. Learn best practices for writing clean, safe code. 7. Get Comfortable with File I/O: Learn how Java reads from and writes to files using File , FileReader , BufferedReader , FileWriter , and Streams . Practice creating programs that manage and manipulate file data. 8. Understand Multithreading and Concurrency: Grasp the basics of threads, synchronization, and concurrent programming. Learn how Java handles multiple tasks simultaneously using the Thread class and ExecutorService . 9. Learn Java Libraries and APIs: Familiarize yourself with essential APIs like Java Math, Date & Time (java.time), and String manipulation. Explore popular libraries like Apache Commons, Gson, or Jackson for real-world development. 10. Build Real-World Projects: Apply your knowledge by building console apps, file management systems, or basic desktop GUIs using JavaFX or Swing. Gradually move into web development with Java Servlets, JSP, or Spring Boot. Java Program Examples Java Programming Examples Java Exercises – Basic to Advanced Java Practice Programs Java Coding Practice Problems Java Fundamentals Coding Practice Problems Java Methods Coding Practice Problems Java Arrays Coding Practice Problems Java Strings Coding Practice Problems Java OOPs Coding Practice Problems Java Sorting and Searching Algorithms Coding Practice Problems Java Collections Coding Practice Problems Java Stream & Lambda Expression Coding Practice Problems Java Quizzes and MCQs Java Language MCQs with Answers Important Java Projects Number Guessing Game Simple Banking Application Currency Converter Tic-Tac-Toe Game Snake Game Memory Game Chat Application Face Detection System Social Networking Site Text Editor Career & Jobs in Java 2025 Java opens doors to a wide range of tech careers across industries—from enterprise software to mobile apps and cloud systems. Here’s a list of top career options for professionals with Java expertise, along with their average salary ranges: Career Average Salary (INR) Per Annum Average Salary (USD) Per Annum Java Developer ₹400,000 – ₹1,200,000 $55,000 – $100,000 Full Stack Java Developer ₹700,000 – ₹1,800,000 $75,000 – $130,000 Backend Engineer (Java) ₹800,000 – ₹2,000,000 $80,000 – $140,000 Android Developer (Java/Kotlin) ₹500,000 – ₹1,500,000 $60,000 – $110,000 Java Architect ₹1,500,000 – ₹3,000,000 $120,000 – $170,000 DevOps Engineer (Java projects) ₹900,000 – ₹2,200,000 $90,000 – $150,000 Big Data Engineer (Java + Hadoop) ₹1,000,000 – ₹2,500,000 $100,000 – $160,000 Automation Test Engineer (Java + Selenium) ₹600,000 – ₹1,400,000 $65,000 – $110,000 Software Engineer (Java Spring Boot) ₹700,000 – ₹1,800,000 $75,000 – $130,000 Java Consultant / Technical Lead ₹1,200,000 – ₹2,800,000 $110,000 – $160,000 List of Companies Using Java These are some popular companies that use Java in thier workflow: Company Description Google Uses Java for Android development, backend services, and internal tools across products like Gmail and Google Drive. Amazon Java is widely used at Amazon for building scalable backend systems, AWS services, and e-commerce infrastructure. Netflix Java powers many of Netflix\'s backend microservices, helping deliver content to millions of users with high availability. Spotify Relies on Java for data processing, backend APIs, and scalable microservices that support music streaming. Airbnb Uses Java in its backend systems to handle listings, payments, and user interactions at scale. Uber Employs Java for real-time dispatch systems, geolocation services, and backend microservices. LinkedIn Java is a core language for building LinkedIn’s backend architecture, handling data-intensive workloads and APIs. eBay Uses Java for high-traffic applications, auction management, and payment services. NASA Implements Java in various projects, including simulations, data analysis tools, and mission-critical software. Intel Uses Java in embedded systems, performance testing tools, and internal applications across chip development Introduction to Java Visit Course Introduction to Java Writing First Program in Java Variables and Primitive DataTypes Non Primitive DataTypes Type Conversion in Java Input in Java Comment More info Campus Training Program Next Article Introduction to Java K kartik Follow 363 Improve Article Tags : Java Tutorials Practice Tags : Java Like 363', 'Java Tutorial Last Updated : 23 Jul, 2025 Comments Improve Suggest changes 363 Likes Like Report Java is a high-level, object-oriented programming language used to build web apps, mobile applications, and enterprise software systems. It is known for its Write Once, Run Anywhere capability, which means code written in Java can run on any device that supports the Java Virtual Machine (JVM). Java syntax and structure is similar to C-based languages like C++ and C#. Its robustness, platform-independent compatibility, and strong memory management have made it a go-to language for developers worldwide. Previous Pause Next 7 / 9 This Java tutorial is designed for both beginners and experienced professionals and it covers basic to advanced Java topics. Do you wish to learn Java in a scheduled manner ? Try our ongoing free course Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Do you wish to learn Advance Java in scheduled manner? Try our ongoing free course Advance Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Why Learn Java? Java is used to build Android apps, desktop and web apps, enterprise backend systems, and cloud-based software. Java is in high demand with many job opportunities in software development. Java has popular frameworks like Spring and Hibernate which makes Java powerful for enterprise applications. Java supports object-oriented programming for clean and reusable code. It runs on all platforms Windows, Mac, and Linux using the JVM. Top companies like Amazon, Netflix, and LinkedIn use Java. Java Hello World Program Here is a simple Java program that prints "Hello World". Java // A Java program to print "Hello World" public class Geeks { public static void main ( String args [] ) { System . out . println ( "Hello World" ); } } // A Java program to print "Hello World" public class Geeks { public static void main ( String args []) { System . out . println ( "Hello World" ); } } Output Hello World Java Basics Java basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals. Mastering these fundamentals is key to building strong, error-free Java applications: Introduction Download and Install Java JDK vs JRE vs JVM Identifiers Keywords Quiz : Java Basics and Identifiers Data Types Variables Operators Quiz : Variables , Operator Decision Making (if, if-else, switch, break, continue, jump) Loops Quiz : Control Statements and Loops Java Methods Java methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier: Introduction to Methods Static Methods vs Instance Methods Access Modifiers Command Line Arguments Variable Arguments (Varargs) Quiz : Methods Java Arrays Java arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions: Introduction to Arrays Declare and Initialize Arrays Multi-Dimensional Arrays Quiz: Java Arrays Jagged Arrays Arrays Class Final Arrays Java Array Programs Quiz: Array Programs Java Strings Java Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed: Introduction of Strings Why Strings are Immutable? Java\xa0String Concatenation Quiz : String Basics String Class StringBuffer Class StringBuilder Class Quiz: String Classes Strings vs StringBuffer vs StringBuilder Java String Programs Java OOPs Concepts Java follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable: What are OOPs Concepts? Classes and Objects Quiz: Classes and Objects Constructors Quiz : Constructors Object Class Abstraction Encapsulation Inheritance Quiz : Inheritance and Abstraction Polymorphism Compile-Time Polymorphism (Method Overloading) Runtime Polymorphism (Method Overriding) Packages Quiz : Polymorphism and Packages Java Interfaces Java interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach: Java Interfaces Interfaces and Inheritance Class vs Interface Quiz: Interfaces Functional Interface Nested Interface Marker Interface Comparator Interface Quiz : Interface types and Comparator Java Collections Java Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap: Java Collection Framework Collections Class Collection Interface Quiz: Collection List Interface ArrayList LinkedList Quiz : List , ArrayList , LinkedList Set Interface HashSet TreeSet Quiz : Set and HashSet Queue Interface Priority Queue Deque Interface Map Interface HashMap Quiz: Queue and Map Interface Iterator Comparator Interface Comparable Interface Quiz : Iterators , Comparator vs Comparable Java Exception Handling ava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions: Java Exceptions Checked vs Unchecked Exceptions Try Catch Block Quiz: Java Exceptions Final, Finally and Finalize Throw and Throws Customized Exception Handling Chained Exceptions Null Pointer Exceptions Exception Handling with Method Overriding Quiz : Exception Handling Java Multithreading Java Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks like parallel processing and responsive applications: Introduction to Java Multithreading Threads Thread Class Runnable Interface Quiz: Thread Basics and Lifecycle Lifecycle and States of a Thread Main Thread Thread Priority in Multithreading Naming & Feteching Name of Current Thread Thread.start() vs Thread.run() Method Thread.sleep() Method Daemon Thread Quiz : Thread Methods and Daemon Threads Thread Safety Thread Pools Java File Handling Java File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from the java.io and java.nio packages for efficient file operations: File Handling File Class Create Files Read Files Quiz: File Handling Write on Files Delete File FileReader Class FileWriter Class Quiz: File Writing FilePermission Class FileDescriptor Class Java Streams and Lambda Expressions Java Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data: Lambda Expressions Method References Java Stream - Complete Tutorial Quiz: Lambda Expressions and Streams Java 8 Features - Complete Tutorial Java IO Java IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of the java.io package and supports both byte and character streams: Introduction to Java IO Reader Class Writer Class FileInput Stream Quiz : IO Basics FileOutput Stream BufferedReader Input Stream BufferedReader Output stream BufferedReader vs Scanner Fast I/O Quiz : BufferedReader vs Scanner and Fast I/O Java Synchronization Java Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency: Java Synchronization Importance of Thread Synchronization Method and Block Synchronization Quiz : Synchronization Basics Atomic vs Volatile vs Synchronized Local Frameworks vs Thread Synchronization Deadlock in Multithreading Quiz : Deadlocks and Synchronization Deadlock Prevention and Avoidance Lock vs Monitor in Concurrency Reentrant Lock Quiz : Concurrency Locks and Reentrant Locks Java Regex Java Regex (Regular Expressions) allows pattern matching and text manipulation using the java.util.regex package. It is powerful for validating, searching, and replacing strings based on specific patterns: What is Java Regex? Pattern Class Matcher Class Character Class Quiz : Regex Basics and Pattern Matching Quantifiers Java Networking Java Networking enables communication between devices over a network using classes from the java.net package. It supports protocols like TCP and UDP for building client-server applications and data exchange: Introduction to Java Networking TCP Architecture UDP Architecture IPV4 vs IPV6 Quiz : Networking Basics and Protocols Connection-Oriented vs Connectionless Protocols Socket Programming Server Socket Class Quiz: Sockets and Server Communication URL Class and Methods Java Database Connectivity(JDBC) Introduction to Java JDBC JDBC Driver JDBC Connection Types of Statements in JDBC Quiz : JDBC Java Memory Allocation Java Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically: Java Memory Management How Java Objects Stored in Memory? Quiz : Java Memory Allocation Stack vs Heap Memory Allocation Quiz : Heap vs Stack Java Virtual Machine(JVM) Stack Area Types of Memory Areas Allocated by JVM Garbage Collection Quiz: JVM Memory Management and Garbage Collection Types of JVM Garbage Collectors Heap and Stack Memory Allocation Memory Leaks Java Interview Questions Prepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate: 200+ Core Java Interview Questions and Answers Java MCQ Best Approach to Learn Java Here’s the step-by-step approach to learn and master Java efficiently and effectively: 1. Understand Java Fundamentals: Start with the basics: what Java is, how it works (JVM, JRE, JDK), and why it’s platform-independent. Learn about Java’s role in building desktop, web, and mobile applications. 2. Set Up the Java Environment: Install the latest JDK and configure your development environment. Use a beginner-friendly IDE like IntelliJ IDEA, Eclipse, or VS Code for writing and testing your code. 3. Learn Core Java Concepts: Focus on essential topics like variables, data types, operators, control structures (if-else, switch, loops), and input/output. Practice writing simple programs to strengthen your understanding. 4. Master Object-Oriented Programming (OOP): Dive into the pillars of OOP—classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Understand how Java handles these concepts and how to apply them effectively in real projects. 5. Explore Collections and Data Structures: Learn about Java\'s Collection Framework—ArrayList, HashMap, Set, LinkedList, and more. Understand how to use them and when to choose one over the other. 6. Work with Exception Handling: Understand the importance of error handling in Java using try-catch blocks, finally, throw, and custom exceptions. Learn best practices for writing clean, safe code. 7. Get Comfortable with File I/O: Learn how Java reads from and writes to files using File , FileReader , BufferedReader , FileWriter , and Streams . Practice creating programs that manage and manipulate file data. 8. Understand Multithreading and Concurrency: Grasp the basics of threads, synchronization, and concurrent programming. Learn how Java handles multiple tasks simultaneously using the Thread class and ExecutorService . 9. Learn Java Libraries and APIs: Familiarize yourself with essential APIs like Java Math, Date & Time (java.time), and String manipulation. Explore popular libraries like Apache Commons, Gson, or Jackson for real-world development. 10. Build Real-World Projects: Apply your knowledge by building console apps, file management systems, or basic desktop GUIs using JavaFX or Swing. Gradually move into web development with Java Servlets, JSP, or Spring Boot. Java Program Examples Java Programming Examples Java Exercises – Basic to Advanced Java Practice Programs Java Coding Practice Problems Java Fundamentals Coding Practice Problems Java Methods Coding Practice Problems Java Arrays Coding Practice Problems Java Strings Coding Practice Problems Java OOPs Coding Practice Problems Java Sorting and Searching Algorithms Coding Practice Problems Java Collections Coding Practice Problems Java Stream & Lambda Expression Coding Practice Problems Java Quizzes and MCQs Java Language MCQs with Answers Important Java Projects Number Guessing Game Simple Banking Application Currency Converter Tic-Tac-Toe Game Snake Game Memory Game Chat Application Face Detection System Social Networking Site Text Editor Career & Jobs in Java 2025 Java opens doors to a wide range of tech careers across industries—from enterprise software to mobile apps and cloud systems. Here’s a list of top career options for professionals with Java expertise, along with their average salary ranges: Career Average Salary (INR) Per Annum Average Salary (USD) Per Annum Java Developer ₹400,000 – ₹1,200,000 $55,000 – $100,000 Full Stack Java Developer ₹700,000 – ₹1,800,000 $75,000 – $130,000 Backend Engineer (Java) ₹800,000 – ₹2,000,000 $80,000 – $140,000 Android Developer (Java/Kotlin) ₹500,000 – ₹1,500,000 $60,000 – $110,000 Java Architect ₹1,500,000 – ₹3,000,000 $120,000 – $170,000 DevOps Engineer (Java projects) ₹900,000 – ₹2,200,000 $90,000 – $150,000 Big Data Engineer (Java + Hadoop) ₹1,000,000 – ₹2,500,000 $100,000 – $160,000 Automation Test Engineer (Java + Selenium) ₹600,000 – ₹1,400,000 $65,000 – $110,000 Software Engineer (Java Spring Boot) ₹700,000 – ₹1,800,000 $75,000 – $130,000 Java Consultant / Technical Lead ₹1,200,000 – ₹2,800,000 $110,000 – $160,000 List of Companies Using Java These are some popular companies that use Java in thier workflow: Company Description Google Uses Java for Android development, backend services, and internal tools across products like Gmail and Google Drive. Amazon Java is widely used at Amazon for building scalable backend systems, AWS services, and e-commerce infrastructure. Netflix Java powers many of Netflix\'s backend microservices, helping deliver content to millions of users with high availability. Spotify Relies on Java for data processing, backend APIs, and scalable microservices that support music streaming. Airbnb Uses Java in its backend systems to handle listings, payments, and user interactions at scale. Uber Employs Java for real-time dispatch systems, geolocation services, and backend microservices. LinkedIn Java is a core language for building LinkedIn’s backend architecture, handling data-intensive workloads and APIs. eBay Uses Java for high-traffic applications, auction management, and payment services. NASA Implements Java in various projects, including simulations, data analysis tools, and mission-critical software. Intel Uses Java in embedded systems, performance testing tools, and internal applications across chip development Introduction to Java Visit Course Introduction to Java Writing First Program in Java Variables and Primitive DataTypes Non Primitive DataTypes Type Conversion in Java Input in Java Comment More info Campus Training Program Next Article Introduction to Java K kartik Follow 363 Improve Article Tags : Java Tutorials Practice Tags : Java', 'Java is a high-level, object-oriented programming language used to build web apps, mobile applications, and enterprise software systems. It is known for its Write Once, Run Anywhere capability, which means code written in Java can run on any device that supports the Java Virtual Machine (JVM). Java syntax and structure is similar to C-based languages like C++ and C#. Its robustness, platform-independent compatibility, and strong memory management have made it a go-to language for developers worldwide. Previous Pause Next 7 / 9 This Java tutorial is designed for both beginners and experienced professionals and it covers basic to advanced Java topics. Do you wish to learn Java in a scheduled manner ? Try our ongoing free course Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Do you wish to learn Advance Java in scheduled manner? Try our ongoing free course Advance Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems. Why Learn Java? Java is used to build Android apps, desktop and web apps, enterprise backend systems, and cloud-based software. Java is in high demand with many job opportunities in software development. Java has popular frameworks like Spring and Hibernate which makes Java powerful for enterprise applications. Java supports object-oriented programming for clean and reusable code. It runs on all platforms Windows, Mac, and Linux using the JVM. Top companies like Amazon, Netflix, and LinkedIn use Java. Java Hello World Program Here is a simple Java program that prints "Hello World". Java // A Java program to print "Hello World" public class Geeks { public static void main ( String args [] ) { System . out . println ( "Hello World" ); } } // A Java program to print "Hello World" public class Geeks { public static void main ( String args []) { System . out . println ( "Hello World" ); } } Output Hello World Java Basics Java basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals. Mastering these fundamentals is key to building strong, error-free Java applications: Introduction Download and Install Java JDK vs JRE vs JVM Identifiers Keywords Quiz : Java Basics and Identifiers Data Types Variables Operators Quiz : Variables , Operator Decision Making (if, if-else, switch, break, continue, jump) Loops Quiz : Control Statements and Loops Java Methods Java methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier: Introduction to Methods Static Methods vs Instance Methods Access Modifiers Command Line Arguments Variable Arguments (Varargs) Quiz : Methods Java Arrays Java arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions: Introduction to Arrays Declare and Initialize Arrays Multi-Dimensional Arrays Quiz: Java Arrays Jagged Arrays Arrays Class Final Arrays Java Array Programs Quiz: Array Programs Java Strings Java Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed: Introduction of Strings Why Strings are Immutable? Java\xa0String Concatenation Quiz : String Basics String Class StringBuffer Class StringBuilder Class Quiz: String Classes Strings vs StringBuffer vs StringBuilder Java String Programs Java OOPs Concepts Java follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable: What are OOPs Concepts? Classes and Objects Quiz: Classes and Objects Constructors Quiz : Constructors Object Class Abstraction Encapsulation Inheritance Quiz : Inheritance and Abstraction Polymorphism Compile-Time Polymorphism (Method Overloading) Runtime Polymorphism (Method Overriding) Packages Quiz : Polymorphism and Packages Java Interfaces Java interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach: Java Interfaces Interfaces and Inheritance Class vs Interface Quiz: Interfaces Functional Interface Nested Interface Marker Interface Comparator Interface Quiz : Interface types and Comparator Java Collections Java Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap: Java Collection Framework Collections Class Collection Interface Quiz: Collection List Interface ArrayList LinkedList Quiz : List , ArrayList , LinkedList Set Interface HashSet TreeSet Quiz : Set and HashSet Queue Interface Priority Queue Deque Interface Map Interface HashMap Quiz: Queue and Map Interface Iterator Comparator Interface Comparable Interface Quiz : Iterators , Comparator vs Comparable Java Exception Handling ava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions: Java Exceptions Checked vs Unchecked Exceptions Try Catch Block Quiz: Java Exceptions Final, Finally and Finalize Throw and Throws Customized Exception Handling Chained Exceptions Null Pointer Exceptions Exception Handling with Method Overriding Quiz : Exception Handling Java Multithreading Java Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks like parallel processing and responsive applications: Introduction to Java Multithreading Threads Thread Class Runnable Interface Quiz: Thread Basics and Lifecycle Lifecycle and States of a Thread Main Thread Thread Priority in Multithreading Naming & Feteching Name of Current Thread Thread.start() vs Thread.run() Method Thread.sleep() Method Daemon Thread Quiz : Thread Methods and Daemon Threads Thread Safety Thread Pools Java File Handling Java File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from the java.io and java.nio packages for efficient file operations: File Handling File Class Create Files Read Files Quiz: File Handling Write on Files Delete File FileReader Class FileWriter Class Quiz: File Writing FilePermission Class FileDescriptor Class Java Streams and Lambda Expressions Java Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data: Lambda Expressions Method References Java Stream - Complete Tutorial Quiz: Lambda Expressions and Streams Java 8 Features - Complete Tutorial Java IO Java IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of the java.io package and supports both byte and character streams: Introduction to Java IO Reader Class Writer Class FileInput Stream Quiz : IO Basics FileOutput Stream BufferedReader Input Stream BufferedReader Output stream BufferedReader vs Scanner Fast I/O Quiz : BufferedReader vs Scanner and Fast I/O Java Synchronization Java Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency: Java Synchronization Importance of Thread Synchronization Method and Block Synchronization Quiz : Synchronization Basics Atomic vs Volatile vs Synchronized Local Frameworks vs Thread Synchronization Deadlock in Multithreading Quiz : Deadlocks and Synchronization Deadlock Prevention and Avoidance Lock vs Monitor in Concurrency Reentrant Lock Quiz : Concurrency Locks and Reentrant Locks Java Regex Java Regex (Regular Expressions) allows pattern matching and text manipulation using the java.util.regex package. It is powerful for validating, searching, and replacing strings based on specific patterns: What is Java Regex? Pattern Class Matcher Class Character Class Quiz : Regex Basics and Pattern Matching Quantifiers Java Networking Java Networking enables communication between devices over a network using classes from the java.net package. It supports protocols like TCP and UDP for building client-server applications and data exchange: Introduction to Java Networking TCP Architecture UDP Architecture IPV4 vs IPV6 Quiz : Networking Basics and Protocols Connection-Oriented vs Connectionless Protocols Socket Programming Server Socket Class Quiz: Sockets and Server Communication URL Class and Methods Java Database Connectivity(JDBC) Introduction to Java JDBC JDBC Driver JDBC Connection Types of Statements in JDBC Quiz : JDBC Java Memory Allocation Java Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically: Java Memory Management How Java Objects Stored in Memory? Quiz : Java Memory Allocation Stack vs Heap Memory Allocation Quiz : Heap vs Stack Java Virtual Machine(JVM) Stack Area Types of Memory Areas Allocated by JVM Garbage Collection Quiz: JVM Memory Management and Garbage Collection Types of JVM Garbage Collectors Heap and Stack Memory Allocation Memory Leaks Java Interview Questions Prepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate: 200+ Core Java Interview Questions and Answers Java MCQ Best Approach to Learn Java Here’s the step-by-step approach to learn and master Java efficiently and effectively: 1. Understand Java Fundamentals: Start with the basics: what Java is, how it works (JVM, JRE, JDK), and why it’s platform-independent. Learn about Java’s role in building desktop, web, and mobile applications. 2. Set Up the Java Environment: Install the latest JDK and configure your development environment. Use a beginner-friendly IDE like IntelliJ IDEA, Eclipse, or VS Code for writing and testing your code. 3. Learn Core Java Concepts: Focus on essential topics like variables, data types, operators, control structures (if-else, switch, loops), and input/output. Practice writing simple programs to strengthen your understanding. 4. Master Object-Oriented Programming (OOP): Dive into the pillars of OOP—classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Understand how Java handles these concepts and how to apply them effectively in real projects. 5. Explore Collections and Data Structures: Learn about Java\'s Collection Framework—ArrayList, HashMap, Set, LinkedList, and more. Understand how to use them and when to choose one over the other. 6. Work with Exception Handling: Understand the importance of error handling in Java using try-catch blocks, finally, throw, and custom exceptions. Learn best practices for writing clean, safe code. 7. Get Comfortable with File I/O: Learn how Java reads from and writes to files using File , FileReader , BufferedReader , FileWriter , and Streams . Practice creating programs that manage and manipulate file data. 8. Understand Multithreading and Concurrency: Grasp the basics of threads, synchronization, and concurrent programming. Learn how Java handles multiple tasks simultaneously using the Thread class and ExecutorService . 9. Learn Java Libraries and APIs: Familiarize yourself with essential APIs like Java Math, Date & Time (java.time), and String manipulation. Explore popular libraries like Apache Commons, Gson, or Jackson for real-world development. 10. Build Real-World Projects: Apply your knowledge by building console apps, file management systems, or basic desktop GUIs using JavaFX or Swing. Gradually move into web development with Java Servlets, JSP, or Spring Boot. Java Program Examples Java Programming Examples Java Exercises – Basic to Advanced Java Practice Programs Java Coding Practice Problems Java Fundamentals Coding Practice Problems Java Methods Coding Practice Problems Java Arrays Coding Practice Problems Java Strings Coding Practice Problems Java OOPs Coding Practice Problems Java Sorting and Searching Algorithms Coding Practice Problems Java Collections Coding Practice Problems Java Stream & Lambda Expression Coding Practice Problems Java Quizzes and MCQs Java Language MCQs with Answers Important Java Projects Number Guessing Game Simple Banking Application Currency Converter Tic-Tac-Toe Game Snake Game Memory Game Chat Application Face Detection System Social Networking Site Text Editor Career & Jobs in Java 2025 Java opens doors to a wide range of tech careers across industries—from enterprise software to mobile apps and cloud systems. Here’s a list of top career options for professionals with Java expertise, along with their average salary ranges: Career Average Salary (INR) Per Annum Average Salary (USD) Per Annum Java Developer ₹400,000 – ₹1,200,000 $55,000 – $100,000 Full Stack Java Developer ₹700,000 – ₹1,800,000 $75,000 – $130,000 Backend Engineer (Java) ₹800,000 – ₹2,000,000 $80,000 – $140,000 Android Developer (Java/Kotlin) ₹500,000 – ₹1,500,000 $60,000 – $110,000 Java Architect ₹1,500,000 – ₹3,000,000 $120,000 – $170,000 DevOps Engineer (Java projects) ₹900,000 – ₹2,200,000 $90,000 – $150,000 Big Data Engineer (Java + Hadoop) ₹1,000,000 – ₹2,500,000 $100,000 – $160,000 Automation Test Engineer (Java + Selenium) ₹600,000 – ₹1,400,000 $65,000 – $110,000 Software Engineer (Java Spring Boot) ₹700,000 – ₹1,800,000 $75,000 – $130,000 Java Consultant / Technical Lead ₹1,200,000 – ₹2,800,000 $110,000 – $160,000 List of Companies Using Java These are some popular companies that use Java in thier workflow: Company Description Google Uses Java for Android development, backend services, and internal tools across products like Gmail and Google Drive. Amazon Java is widely used at Amazon for building scalable backend systems, AWS services, and e-commerce infrastructure. Netflix Java powers many of Netflix\'s backend microservices, helping deliver content to millions of users with high availability. Spotify Relies on Java for data processing, backend APIs, and scalable microservices that support music streaming. Airbnb Uses Java in its backend systems to handle listings, payments, and user interactions at scale. Uber Employs Java for real-time dispatch systems, geolocation services, and backend microservices. LinkedIn Java is a core language for building LinkedIn’s backend architecture, handling data-intensive workloads and APIs. eBay Uses Java for high-traffic applications, auction management, and payment services. NASA Implements Java in various projects, including simulations, data analysis tools, and mission-critical software. Intel Uses Java in embedded systems, performance testing tools, and internal applications across chip development Introduction to Java Visit Course Introduction to Java Writing First Program in Java Variables and Primitive DataTypes Non Primitive DataTypes Type Conversion in Java Input in Java Comment More info Campus Training Program Next Article Introduction to Java K kartik Follow 363 Improve Article Tags : Java Tutorials Practice Tags : Java', '2k+ interested Geeks Complete Python Program - Mastering from Fundamentals to Advanced Concepts Explore']})